import { Component, Input, ViewEncapsulation } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/material/icon";
import * as i3 from "@angular/material/button";
import * as i4 from "@angular/material/progress-bar";
export class ArqUploadFilesComponent {
    constructor() {
        this.multiple = true;
        this.selectedFiles = [];
        this.showProgress = false;
    }
    ngOnInit() { }
    selectFiles(event) {
        this.selectedFiles = event.target.files;
        this.txtLabel = this.customLabel(this.selectedFiles?.length);
    }
    cancelUpload() {
        this.selectedFiles = [];
        this.showProgress = false;
        this.config.cancelUpload();
    }
    uploadFiles() {
        this.showProgress = true;
        if (this.selectedFiles) {
            const formData = new FormData();
            for (var i = 0; i < this.selectedFiles.length; i++) {
                formData.append('file', this.selectedFiles[i]);
            }
            this.upload(formData);
        }
    }
    upload(files) {
        if (files) {
            this.config.uploadFile(files).subscribe((resp) => {
                this.response = resp;
                this.selectedFiles = [];
                this.showProgress = false;
            });
        }
    }
    customLabel(num) {
        const str = num > 1 ? ' archivos' : ' archivo';
        const label = num + str;
        return label;
    }
}
ArqUploadFilesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqUploadFilesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ArqUploadFilesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ArqUploadFilesComponent, selector: "arq-upload-files", inputs: { config: "config", label: "label", multiple: "multiple" }, ngImport: i0, template: "<div class=\"row align-items-center\">\r\n  <div class=\"col-8\">\r\n    <input #file type=\"file\" [multiple]=\"multiple\" (change)=\"selectFiles($event)\" class=\"file-input\" />\r\n\r\n    <div class=\"file-upload\">\r\n      <button mat-mini-fab color=\"primary\" class=\"upload-btn\" (click)=\"file.click()\">\r\n        <mat-icon>attach_file</mat-icon>\r\n      </button>\r\n      <div *ngIf=\"selectedFiles?.length == 0; else elseBlock\">\r\n        <span class=\"d-flex justify-content-center align-items-center name\">{{ label }}</span>\r\n      </div>\r\n      <ng-template #elseBlock>\r\n        <span class=\"d-flex justify-content-center align-items-center\">{{ txtLabel }}</span>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"col-4\">\r\n    <button\r\n      mat-raised-button\r\n      class=\"btn btn-success btn-sm\"\r\n      [disabled]=\"selectedFiles.length == 0\"\r\n      (click)=\"uploadFiles()\">\r\n      Subir archivos\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"showProgress\" class=\"mt-4\">\r\n  <div *ngFor=\"let item of selectedFiles\" class=\"d-flex align-items-center my-2\">\r\n    <span> {{ item.name }} </span>\r\n  </div>\r\n  <div class=\"progress\">\r\n    <mat-progress-bar class=\"progress-bar\" mode=\"indeterminate\"></mat-progress-bar>\r\n    <mat-icon class=\"cancel-upload\" (click)=\"cancelUpload()\">delete_forever</mat-icon>\r\n  </div>\r\n</div>\r\n", styles: [".file-input{display:none}.progress{display:flex;justify-content:center;align-items:center}.file-upload{display:flex;align-items:center}.file-upload .name{padding-left:1em}.cancel-upload{cursor:pointer}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i3.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i3.MatMiniFabButton, selector: "button[mat-mini-fab]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i4.MatProgressBar, selector: "mat-progress-bar", inputs: ["color", "value", "bufferValue", "mode"], outputs: ["animationEnd"], exportAs: ["matProgressBar"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqUploadFilesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arq-upload-files', encapsulation: ViewEncapsulation.None, template: "<div class=\"row align-items-center\">\r\n  <div class=\"col-8\">\r\n    <input #file type=\"file\" [multiple]=\"multiple\" (change)=\"selectFiles($event)\" class=\"file-input\" />\r\n\r\n    <div class=\"file-upload\">\r\n      <button mat-mini-fab color=\"primary\" class=\"upload-btn\" (click)=\"file.click()\">\r\n        <mat-icon>attach_file</mat-icon>\r\n      </button>\r\n      <div *ngIf=\"selectedFiles?.length == 0; else elseBlock\">\r\n        <span class=\"d-flex justify-content-center align-items-center name\">{{ label }}</span>\r\n      </div>\r\n      <ng-template #elseBlock>\r\n        <span class=\"d-flex justify-content-center align-items-center\">{{ txtLabel }}</span>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"col-4\">\r\n    <button\r\n      mat-raised-button\r\n      class=\"btn btn-success btn-sm\"\r\n      [disabled]=\"selectedFiles.length == 0\"\r\n      (click)=\"uploadFiles()\">\r\n      Subir archivos\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"showProgress\" class=\"mt-4\">\r\n  <div *ngFor=\"let item of selectedFiles\" class=\"d-flex align-items-center my-2\">\r\n    <span> {{ item.name }} </span>\r\n  </div>\r\n  <div class=\"progress\">\r\n    <mat-progress-bar class=\"progress-bar\" mode=\"indeterminate\"></mat-progress-bar>\r\n    <mat-icon class=\"cancel-upload\" (click)=\"cancelUpload()\">delete_forever</mat-icon>\r\n  </div>\r\n</div>\r\n", styles: [".file-input{display:none}.progress{display:flex;justify-content:center;align-items:center}.file-upload{display:flex;align-items:center}.file-upload .name{padding-left:1em}.cancel-upload{cursor:pointer}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { config: [{
                type: Input
            }], label: [{
                type: Input
            }], multiple: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJxLXVwbG9hZC1maWxlcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9hcnEtc2RrL3NyYy9saWIvY29tcG9uZW50cy9hcnEtdXBsb2FkLWZpbGVzL2FycS11cGxvYWQtZmlsZXMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vYXJxLXNkay9zcmMvbGliL2NvbXBvbmVudHMvYXJxLXVwbG9hZC1maWxlcy9hcnEtdXBsb2FkLWZpbGVzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7QUFRNUUsTUFBTSxPQUFPLHVCQUF1QjtJQWdCbEM7UUFSQSxhQUFRLEdBQVksSUFBSSxDQUFDO1FBRWxCLGtCQUFhLEdBQVcsRUFBRSxDQUFDO1FBSTNCLGlCQUFZLEdBQVksS0FBSyxDQUFDO0lBRXRCLENBQUM7SUFFaEIsUUFBUSxLQUFVLENBQUM7SUFFbkIsV0FBVyxDQUFDLEtBQVU7UUFDcEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUN4QyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUV6QixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUNoQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2xELFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNoRDtZQUVELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdkI7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQWU7UUFDcEIsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtnQkFDcEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO2dCQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUM1QixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVELFdBQVcsQ0FBQyxHQUFRO1FBQ2xCLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1FBQy9DLE1BQU0sS0FBSyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDeEIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOztvSEExRFUsdUJBQXVCO3dHQUF2Qix1QkFBdUIsNEhDUnBDLGc2Q0FxQ0E7MkZEN0JhLHVCQUF1QjtrQkFObkMsU0FBUzsrQkFDRSxrQkFBa0IsaUJBR2IsaUJBQWlCLENBQUMsSUFBSTswRUFJckMsTUFBTTtzQkFETCxLQUFLO2dCQUlOLEtBQUs7c0JBREosS0FBSztnQkFJTixRQUFRO3NCQURQLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FycS11cGxvYWQtZmlsZXMnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9hcnEtdXBsb2FkLWZpbGVzLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9hcnEtdXBsb2FkLWZpbGVzLmNvbXBvbmVudC5jc3MnXSxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBcnFVcGxvYWRGaWxlc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQElucHV0KClcclxuICBjb25maWchOiBhbnk7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgbGFiZWwhOiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgbXVsdGlwbGU6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICBwdWJsaWMgc2VsZWN0ZWRGaWxlczogRmlsZVtdID0gW107XHJcblxyXG4gIHB1YmxpYyB0eHRMYWJlbCE6IHN0cmluZztcclxuICBwdWJsaWMgcmVzcG9uc2U6IGFueTtcclxuICBwdWJsaWMgc2hvd1Byb2dyZXNzOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7fVxyXG5cclxuICBzZWxlY3RGaWxlcyhldmVudDogYW55KSB7XHJcbiAgICB0aGlzLnNlbGVjdGVkRmlsZXMgPSBldmVudC50YXJnZXQuZmlsZXM7XHJcbiAgICB0aGlzLnR4dExhYmVsID0gdGhpcy5jdXN0b21MYWJlbCh0aGlzLnNlbGVjdGVkRmlsZXM/Lmxlbmd0aCk7XHJcbiAgfVxyXG5cclxuICBjYW5jZWxVcGxvYWQoKSB7XHJcbiAgICB0aGlzLnNlbGVjdGVkRmlsZXMgPSBbXTtcclxuICAgIHRoaXMuc2hvd1Byb2dyZXNzID0gZmFsc2U7XHJcbiAgICB0aGlzLmNvbmZpZy5jYW5jZWxVcGxvYWQoKTtcclxuICB9XHJcblxyXG4gIHVwbG9hZEZpbGVzKCkge1xyXG4gICAgdGhpcy5zaG93UHJvZ3Jlc3MgPSB0cnVlO1xyXG5cclxuICAgIGlmICh0aGlzLnNlbGVjdGVkRmlsZXMpIHtcclxuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnNlbGVjdGVkRmlsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCB0aGlzLnNlbGVjdGVkRmlsZXNbaV0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnVwbG9hZChmb3JtRGF0YSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGxvYWQoZmlsZXM6IEZvcm1EYXRhKTogdm9pZCB7XHJcbiAgICBpZiAoZmlsZXMpIHtcclxuICAgICAgdGhpcy5jb25maWcudXBsb2FkRmlsZShmaWxlcykuc3Vic2NyaWJlKChyZXNwOiBhbnkpID0+IHtcclxuICAgICAgICB0aGlzLnJlc3BvbnNlID0gcmVzcDtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkRmlsZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnNob3dQcm9ncmVzcyA9IGZhbHNlO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGN1c3RvbUxhYmVsKG51bTogYW55KSB7XHJcbiAgICBjb25zdCBzdHIgPSBudW0gPiAxID8gJyBhcmNoaXZvcycgOiAnIGFyY2hpdm8nO1xyXG4gICAgY29uc3QgbGFiZWwgPSBudW0gKyBzdHI7XHJcbiAgICByZXR1cm4gbGFiZWw7XHJcbiAgfVxyXG59XHJcbiIsIjxkaXYgY2xhc3M9XCJyb3cgYWxpZ24taXRlbXMtY2VudGVyXCI+XHJcbiAgPGRpdiBjbGFzcz1cImNvbC04XCI+XHJcbiAgICA8aW5wdXQgI2ZpbGUgdHlwZT1cImZpbGVcIiBbbXVsdGlwbGVdPVwibXVsdGlwbGVcIiAoY2hhbmdlKT1cInNlbGVjdEZpbGVzKCRldmVudClcIiBjbGFzcz1cImZpbGUtaW5wdXRcIiAvPlxyXG5cclxuICAgIDxkaXYgY2xhc3M9XCJmaWxlLXVwbG9hZFwiPlxyXG4gICAgICA8YnV0dG9uIG1hdC1taW5pLWZhYiBjb2xvcj1cInByaW1hcnlcIiBjbGFzcz1cInVwbG9hZC1idG5cIiAoY2xpY2spPVwiZmlsZS5jbGljaygpXCI+XHJcbiAgICAgICAgPG1hdC1pY29uPmF0dGFjaF9maWxlPC9tYXQtaWNvbj5cclxuICAgICAgPC9idXR0b24+XHJcbiAgICAgIDxkaXYgKm5nSWY9XCJzZWxlY3RlZEZpbGVzPy5sZW5ndGggPT0gMDsgZWxzZSBlbHNlQmxvY2tcIj5cclxuICAgICAgICA8c3BhbiBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBuYW1lXCI+e3sgbGFiZWwgfX08L3NwYW4+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8bmctdGVtcGxhdGUgI2Vsc2VCbG9jaz5cclxuICAgICAgICA8c3BhbiBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlclwiPnt7IHR4dExhYmVsIH19PC9zcGFuPlxyXG4gICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcblxyXG4gIDxkaXYgY2xhc3M9XCJjb2wtNFwiPlxyXG4gICAgPGJ1dHRvblxyXG4gICAgICBtYXQtcmFpc2VkLWJ1dHRvblxyXG4gICAgICBjbGFzcz1cImJ0biBidG4tc3VjY2VzcyBidG4tc21cIlxyXG4gICAgICBbZGlzYWJsZWRdPVwic2VsZWN0ZWRGaWxlcy5sZW5ndGggPT0gMFwiXHJcbiAgICAgIChjbGljayk9XCJ1cGxvYWRGaWxlcygpXCI+XHJcbiAgICAgIFN1YmlyIGFyY2hpdm9zXHJcbiAgICA8L2J1dHRvbj5cclxuICA8L2Rpdj5cclxuPC9kaXY+XHJcblxyXG48ZGl2ICpuZ0lmPVwic2hvd1Byb2dyZXNzXCIgY2xhc3M9XCJtdC00XCI+XHJcbiAgPGRpdiAqbmdGb3I9XCJsZXQgaXRlbSBvZiBzZWxlY3RlZEZpbGVzXCIgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG15LTJcIj5cclxuICAgIDxzcGFuPiB7eyBpdGVtLm5hbWUgfX0gPC9zcGFuPlxyXG4gIDwvZGl2PlxyXG4gIDxkaXYgY2xhc3M9XCJwcm9ncmVzc1wiPlxyXG4gICAgPG1hdC1wcm9ncmVzcy1iYXIgY2xhc3M9XCJwcm9ncmVzcy1iYXJcIiBtb2RlPVwiaW5kZXRlcm1pbmF0ZVwiPjwvbWF0LXByb2dyZXNzLWJhcj5cclxuICAgIDxtYXQtaWNvbiBjbGFzcz1cImNhbmNlbC11cGxvYWRcIiAoY2xpY2spPVwiY2FuY2VsVXBsb2FkKClcIj5kZWxldGVfZm9yZXZlcjwvbWF0LWljb24+XHJcbiAgPC9kaXY+XHJcbjwvZGl2PlxyXG4iXX0=