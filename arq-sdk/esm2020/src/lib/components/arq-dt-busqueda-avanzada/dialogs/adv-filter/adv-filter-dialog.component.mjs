import { Component, Inject, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { COMMA, ENTER } from '@angular/cdk/keycodes';
import { map, of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/material/datepicker";
import * as i5 from "@angular/material/form-field";
import * as i6 from "@angular/material/button";
import * as i7 from "@angular/material/icon";
import * as i8 from "@angular/material/input";
import * as i9 from "@angular/material/select";
import * as i10 from "@angular/material/core";
import * as i11 from "@angular/material/autocomplete";
import * as i12 from "@angular/material/chips";
import * as i13 from "@ngneat/transloco";
export class ArqAdvFilterDialogComponent {
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.filter = { type: null, data: [] };
        this.filterTypes = FILTER_TYPES['text'];
        this.separatorKeysCodes = [ENTER, COMMA];
        if (data.selectedCol)
            this.colChanged(data.selectedCol);
    }
    colChanged(col) {
        this.filterTypes = FILTER_TYPES[col.type];
        if (col.type === 'autocomplete') {
            col.dataFn = of(col.data);
        }
    }
    generateFilter() {
        let _type = this.filter.type;
        let _data = this.filter.data;
        if (['null', 'notnull'].includes(this.filter.type)) {
            _type = 'informed';
            _data = this.filter.type === 'null' ? ['false'] : ['true'];
        }
        if (this.filter.type === 'autocompletemultiple') {
            _data = this.filter.data.map(data => data.value);
        }
        return {
            column: this.data.selectedCol,
            type: _type,
            data: _data
        };
    }
    addTx(event) {
        if (event.value)
            this.filter.data.push(event.value.trim());
        event.chipInput.clear();
    }
    removeTx(tx) {
        const index = this.filter.data.indexOf(tx);
        if (index >= 0)
            this.filter.data.splice(index, 1);
    }
    doFilter() {
        if (!this.filterData)
            return;
        if (this.filterData.hasOwnProperty('value')) {
            this.filter.data.push(this.filterData);
            this.filterData = '';
            this.chipInput.nativeElement.value = '';
        }
        this.data.selectedCol.dataFn = this.data.selectedCol.dataFn.pipe(map((val) => this.filterVal(val, this.filterData)));
    }
    filterVal(val, data) {
        if (!val)
            return [];
        return val.filter(item => item.description.toLowerCase().includes(this.getValue(data).toLowerCase()) && !this.filter.data.includes(item));
    }
    getValue(data) {
        return typeof data === 'string' ? data : data.value;
    }
}
ArqAdvFilterDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqAdvFilterDialogComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
ArqAdvFilterDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ArqAdvFilterDialogComponent, selector: "arq-adv-filter-dialog", viewQueries: [{ propertyName: "chipInput", first: true, predicate: ["chipInput"], descendants: true }], ngImport: i0, template: "<h2 mat-dialog-title>{{ 'DT-BA.ADV-FILTER.TITLE' | transloco }}</h2>\r\n\r\n<mat-dialog-content>\r\n  <h4>{{ 'DT-BA.COLUMN' | transloco }}</h4>\r\n  <mat-form-field>\r\n    <mat-select\r\n      [placeholder]=\"'DT-BA.COLUMN' | transloco\"\r\n      [(value)]=\"data.selectedCol\"\r\n      (selectionChange)=\"colChanged($event.value)\">\r\n      <mat-option *ngFor=\"let col of data.filterCols(data.allColumnsSchema)\" [value]=\"col\">{{ col.label }}</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n  <h4>{{ 'DT-BA.FILTERS' | transloco }}</h4>\r\n  <i *ngIf=\"!data.selectedCol\">{{ 'DT-BA.ADV-FILTER.NO-COL-SEL' | transloco }}</i>\r\n  <ng-container *ngIf=\"data.selectedCol\">\r\n    <mat-form-field>\r\n      <mat-select [placeholder]=\"'DT-BA.TYPE' | transloco\" [(value)]=\"filter.type\">\r\n        <mat-option *ngFor=\"let type of filterTypes\" [value]=\"type[0]\">{{ type[1] }}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <ng-container *ngIf=\"filter.type\" [ngSwitch]=\"data.selectedCol.type\">\r\n      <br />\r\n      <ng-container *ngSwitchCase=\"'date'\">\r\n        <ng-container *ngTemplateOutlet=\"date\"></ng-container>\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'number'\">\r\n        <ng-container *ngTemplateOutlet=\"number\"></ng-container>\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'select'\">\r\n        <ng-container *ngTemplateOutlet=\"select\"></ng-container>\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'autocomplete'\">\r\n        <ng-container *ngTemplateOutlet=\"autocomplete\"></ng-container>\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'text'\">\r\n        <ng-container *ngTemplateOutlet=\"text\"></ng-container>\r\n      </ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions align=\"end\">\r\n  <button mat-raised-button color=\"warn\" mat-dialog-close>{{ 'GENERIC.CANCEL' | transloco }}</button>\r\n  <button mat-raised-button color=\"primary\" [mat-dialog-close]=\"generateFilter()\" cdkFocusInitial>\r\n    {{ 'DT-BA.FILTERV' | transloco }}\r\n  </button>\r\n</mat-dialog-actions>\r\n\r\n<ng-template #date>\r\n  <ng-container [ngSwitch]=\"filter.type\">\r\n    <ng-container *ngSwitchDefault></ng-container>\r\n    <ng-container *ngSwitchCase=\"'daterange'\">\r\n      <mat-form-field>\r\n        <mat-date-range-input [rangePicker]=\"picker\" (click)=\"picker.open()\">\r\n          <input\r\n            matStartDate\r\n            placeholder=\"{{ 'GENERIC.SINCE' | transloco }}\"\r\n            (dateChange)=\"filter.data[0] = $event.value.toDate()\" />\r\n          <input\r\n            matEndDate\r\n            placeholder=\"{{ 'GENERIC.TO' | transloco }}\"\r\n            (dateChange)=\"filter.data[1] = $event.value.toDate()\" />\r\n        </mat-date-range-input>\r\n        <mat-date-range-picker #picker></mat-date-range-picker>\r\n      </mat-form-field>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #number>\r\n  <ng-container [ngSwitch]=\"filter.type\">\r\n    <ng-container *ngSwitchDefault></ng-container>\r\n    <ng-container *ngSwitchCase=\"'numberrange'\">\r\n      <mat-form-field>\r\n        <mat-label>{{ 'GENERIC.SINCE' | transloco }}</mat-label>\r\n        <input matInput type=\"number\" [(ngModel)]=\"filter.data[0]\" />\r\n      </mat-form-field>\r\n      <mat-form-field class=\"ml-1\">\r\n        <mat-label>{{ 'GENERIC.TO' | transloco }}</mat-label>\r\n        <input matInput type=\"number\" [(ngModel)]=\"filter.data[1]\" />\r\n      </mat-form-field>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #select>\r\n  <ng-container [ngSwitch]=\"filter.type\">\r\n    <ng-container *ngSwitchDefault></ng-container>\r\n    <ng-container *ngSwitchCase=\"'selectmultiple'\">\r\n      <mat-form-field>\r\n        <mat-select [(ngModel)]=\"filter.data\" multiple>\r\n          <mat-option *ngFor=\"let col of data.selectedCol.data\" [value]=\"col.value\">\r\n            {{ col.description }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #autocomplete>\r\n  <ng-container [ngSwitch]=\"filter.type\">\r\n    <ng-container *ngSwitchDefault></ng-container>\r\n    <ng-container *ngSwitchCase=\"'autocompletemultiple'\">\r\n      <mat-form-field>\r\n        <mat-chip-grid #chipGrid aria-label=\"selection\">\r\n          <mat-chip-row *ngFor=\"let chip of filter.data\" [value]=\"$any(chip).value\" (removed)=\"removeTx(chip)\">\r\n            {{ $any(chip).description }}\r\n            <button matChipRemove [attr.aria-label]=\"'remove ' + data\">\r\n              <mat-icon>cancel</mat-icon>\r\n            </button>\r\n          </mat-chip-row>\r\n        </mat-chip-grid>\r\n        <input\r\n          #chipInput\r\n          [type]=\"'text'\"\r\n          [matChipInputFor]=\"chipGrid\"\r\n          [matAutocomplete]=\"auto\"\r\n          [(ngModel)]=\"filterData\"\r\n          (ngModelChange)=\"doFilter()\" />\r\n        <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\" class=\"arq-autocomplete\">\r\n          <mat-option *ngFor=\"let col of data.selectedCol.dataFn | async\" [value]=\"col\">\r\n            {{ col.description }}\r\n          </mat-option>\r\n        </mat-autocomplete>\r\n      </mat-form-field>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #text>\r\n  <ng-container [ngSwitch]=\"filter.type\">\r\n    <ng-container *ngSwitchDefault></ng-container>\r\n    <ng-container *ngSwitchCase=\"'textmultiple'\">\r\n      <mat-form-field>\r\n        <mat-chip-grid #chipGrid>\r\n          <mat-chip-row *ngFor=\"let tx of filter.data\" (removed)=\"removeTx(tx)\">\r\n            {{ tx }}\r\n            <button matChipRemove><mat-icon>cancel</mat-icon></button>\r\n          </mat-chip-row>\r\n          <input\r\n            [placeholder]=\"'DT-BA.ADV-FILTER.ADD-TEXTS' | transloco\"\r\n            [matChipInputFor]=\"chipGrid\"\r\n            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n            [matChipInputAddOnBlur]=\"true\"\r\n            (matChipInputTokenEnd)=\"addTx($event)\" />\r\n        </mat-chip-grid>\r\n      </mat-form-field>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n", styles: ["button{border-radius:0!important;height:2.6em;min-height:2.6em;font-size:16px}button:not([disabled]):hover{background-color:#0c556d;color:#fff;border-radius:0}button[disabled]{color:#1e1d1d;background-color:#acacac}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i2.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i4.MatDateRangeInput, selector: "mat-date-range-input", inputs: ["rangePicker", "required", "dateFilter", "min", "max", "disabled", "separator", "comparisonStart", "comparisonEnd"], exportAs: ["matDateRangeInput"] }, { kind: "directive", type: i4.MatStartDate, selector: "input[matStartDate]", inputs: ["errorStateMatcher"], outputs: ["dateChange", "dateInput"] }, { kind: "directive", type: i4.MatEndDate, selector: "input[matEndDate]", inputs: ["errorStateMatcher"], outputs: ["dateChange", "dateInput"] }, { kind: "component", type: i4.MatDateRangePicker, selector: "mat-date-range-picker", exportAs: ["matDateRangePicker"] }, { kind: "component", type: i5.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i5.MatLabel, selector: "mat-label" }, { kind: "component", type: i6.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i7.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i8.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i9.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator"], exportAs: ["matSelect"] }, { kind: "component", type: i10.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "component", type: i11.MatAutocomplete, selector: "mat-autocomplete", inputs: ["disableRipple", "hideSingleSelectionIndicator"], exportAs: ["matAutocomplete"] }, { kind: "directive", type: i11.MatAutocompleteTrigger, selector: "input[matAutocomplete], textarea[matAutocomplete]", exportAs: ["matAutocompleteTrigger"] }, { kind: "component", type: i12.MatChipGrid, selector: "mat-chip-grid", inputs: ["tabIndex", "disabled", "placeholder", "required", "value", "errorStateMatcher"], outputs: ["change", "valueChange"] }, { kind: "directive", type: i12.MatChipInput, selector: "input[matChipInputFor]", inputs: ["matChipInputFor", "matChipInputAddOnBlur", "matChipInputSeparatorKeyCodes", "placeholder", "id", "disabled"], outputs: ["matChipInputTokenEnd"], exportAs: ["matChipInput", "matChipInputFor"] }, { kind: "directive", type: i12.MatChipRemove, selector: "[matChipRemove]" }, { kind: "component", type: i12.MatChipRow, selector: "mat-chip-row, [mat-chip-row], mat-basic-chip-row, [mat-basic-chip-row]", inputs: ["color", "disabled", "disableRipple", "tabIndex", "editable"], outputs: ["edited"] }, { kind: "directive", type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["aria-label", "type", "mat-dialog-close", "matDialogClose"], exportAs: ["matDialogClose"] }, { kind: "directive", type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "directive", type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { kind: "directive", type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i13.TranslocoPipe, name: "transloco" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqAdvFilterDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arq-adv-filter-dialog', template: "<h2 mat-dialog-title>{{ 'DT-BA.ADV-FILTER.TITLE' | transloco }}</h2>\r\n\r\n<mat-dialog-content>\r\n  <h4>{{ 'DT-BA.COLUMN' | transloco }}</h4>\r\n  <mat-form-field>\r\n    <mat-select\r\n      [placeholder]=\"'DT-BA.COLUMN' | transloco\"\r\n      [(value)]=\"data.selectedCol\"\r\n      (selectionChange)=\"colChanged($event.value)\">\r\n      <mat-option *ngFor=\"let col of data.filterCols(data.allColumnsSchema)\" [value]=\"col\">{{ col.label }}</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n  <h4>{{ 'DT-BA.FILTERS' | transloco }}</h4>\r\n  <i *ngIf=\"!data.selectedCol\">{{ 'DT-BA.ADV-FILTER.NO-COL-SEL' | transloco }}</i>\r\n  <ng-container *ngIf=\"data.selectedCol\">\r\n    <mat-form-field>\r\n      <mat-select [placeholder]=\"'DT-BA.TYPE' | transloco\" [(value)]=\"filter.type\">\r\n        <mat-option *ngFor=\"let type of filterTypes\" [value]=\"type[0]\">{{ type[1] }}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <ng-container *ngIf=\"filter.type\" [ngSwitch]=\"data.selectedCol.type\">\r\n      <br />\r\n      <ng-container *ngSwitchCase=\"'date'\">\r\n        <ng-container *ngTemplateOutlet=\"date\"></ng-container>\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'number'\">\r\n        <ng-container *ngTemplateOutlet=\"number\"></ng-container>\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'select'\">\r\n        <ng-container *ngTemplateOutlet=\"select\"></ng-container>\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'autocomplete'\">\r\n        <ng-container *ngTemplateOutlet=\"autocomplete\"></ng-container>\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'text'\">\r\n        <ng-container *ngTemplateOutlet=\"text\"></ng-container>\r\n      </ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions align=\"end\">\r\n  <button mat-raised-button color=\"warn\" mat-dialog-close>{{ 'GENERIC.CANCEL' | transloco }}</button>\r\n  <button mat-raised-button color=\"primary\" [mat-dialog-close]=\"generateFilter()\" cdkFocusInitial>\r\n    {{ 'DT-BA.FILTERV' | transloco }}\r\n  </button>\r\n</mat-dialog-actions>\r\n\r\n<ng-template #date>\r\n  <ng-container [ngSwitch]=\"filter.type\">\r\n    <ng-container *ngSwitchDefault></ng-container>\r\n    <ng-container *ngSwitchCase=\"'daterange'\">\r\n      <mat-form-field>\r\n        <mat-date-range-input [rangePicker]=\"picker\" (click)=\"picker.open()\">\r\n          <input\r\n            matStartDate\r\n            placeholder=\"{{ 'GENERIC.SINCE' | transloco }}\"\r\n            (dateChange)=\"filter.data[0] = $event.value.toDate()\" />\r\n          <input\r\n            matEndDate\r\n            placeholder=\"{{ 'GENERIC.TO' | transloco }}\"\r\n            (dateChange)=\"filter.data[1] = $event.value.toDate()\" />\r\n        </mat-date-range-input>\r\n        <mat-date-range-picker #picker></mat-date-range-picker>\r\n      </mat-form-field>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #number>\r\n  <ng-container [ngSwitch]=\"filter.type\">\r\n    <ng-container *ngSwitchDefault></ng-container>\r\n    <ng-container *ngSwitchCase=\"'numberrange'\">\r\n      <mat-form-field>\r\n        <mat-label>{{ 'GENERIC.SINCE' | transloco }}</mat-label>\r\n        <input matInput type=\"number\" [(ngModel)]=\"filter.data[0]\" />\r\n      </mat-form-field>\r\n      <mat-form-field class=\"ml-1\">\r\n        <mat-label>{{ 'GENERIC.TO' | transloco }}</mat-label>\r\n        <input matInput type=\"number\" [(ngModel)]=\"filter.data[1]\" />\r\n      </mat-form-field>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #select>\r\n  <ng-container [ngSwitch]=\"filter.type\">\r\n    <ng-container *ngSwitchDefault></ng-container>\r\n    <ng-container *ngSwitchCase=\"'selectmultiple'\">\r\n      <mat-form-field>\r\n        <mat-select [(ngModel)]=\"filter.data\" multiple>\r\n          <mat-option *ngFor=\"let col of data.selectedCol.data\" [value]=\"col.value\">\r\n            {{ col.description }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #autocomplete>\r\n  <ng-container [ngSwitch]=\"filter.type\">\r\n    <ng-container *ngSwitchDefault></ng-container>\r\n    <ng-container *ngSwitchCase=\"'autocompletemultiple'\">\r\n      <mat-form-field>\r\n        <mat-chip-grid #chipGrid aria-label=\"selection\">\r\n          <mat-chip-row *ngFor=\"let chip of filter.data\" [value]=\"$any(chip).value\" (removed)=\"removeTx(chip)\">\r\n            {{ $any(chip).description }}\r\n            <button matChipRemove [attr.aria-label]=\"'remove ' + data\">\r\n              <mat-icon>cancel</mat-icon>\r\n            </button>\r\n          </mat-chip-row>\r\n        </mat-chip-grid>\r\n        <input\r\n          #chipInput\r\n          [type]=\"'text'\"\r\n          [matChipInputFor]=\"chipGrid\"\r\n          [matAutocomplete]=\"auto\"\r\n          [(ngModel)]=\"filterData\"\r\n          (ngModelChange)=\"doFilter()\" />\r\n        <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\" class=\"arq-autocomplete\">\r\n          <mat-option *ngFor=\"let col of data.selectedCol.dataFn | async\" [value]=\"col\">\r\n            {{ col.description }}\r\n          </mat-option>\r\n        </mat-autocomplete>\r\n      </mat-form-field>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #text>\r\n  <ng-container [ngSwitch]=\"filter.type\">\r\n    <ng-container *ngSwitchDefault></ng-container>\r\n    <ng-container *ngSwitchCase=\"'textmultiple'\">\r\n      <mat-form-field>\r\n        <mat-chip-grid #chipGrid>\r\n          <mat-chip-row *ngFor=\"let tx of filter.data\" (removed)=\"removeTx(tx)\">\r\n            {{ tx }}\r\n            <button matChipRemove><mat-icon>cancel</mat-icon></button>\r\n          </mat-chip-row>\r\n          <input\r\n            [placeholder]=\"'DT-BA.ADV-FILTER.ADD-TEXTS' | transloco\"\r\n            [matChipInputFor]=\"chipGrid\"\r\n            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n            [matChipInputAddOnBlur]=\"true\"\r\n            (matChipInputTokenEnd)=\"addTx($event)\" />\r\n        </mat-chip-grid>\r\n      </mat-form-field>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n", styles: ["button{border-radius:0!important;height:2.6em;min-height:2.6em;font-size:16px}button:not([disabled]):hover{background-color:#0c556d;color:#fff;border-radius:0}button[disabled]{color:#1e1d1d;background-color:#acacac}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; }, propDecorators: { chipInput: [{
                type: ViewChild,
                args: ['chipInput']
            }] } });
const FILTER_TYPES = {
    text: [
        ['notnull', 'Informado'],
        ['null', 'No informado'],
        ['textmultiple', 'Multiple']
    ],
    number: [
        ['notnull', 'Informado'],
        ['null', 'No informado'],
        ['numberrange', 'Rango']
    ],
    date: [
        ['notnull', 'Informado'],
        ['null', 'No informado'],
        ['daterange', 'Rango']
    ],
    datetimepicker: [
        ['notnull', 'Informado'],
        ['null', 'No informado']
    ],
    boolean: [
        ['notnull', 'Informado'],
        ['null', 'No informado']
    ],
    select: [
        ['notnull', 'Informado'],
        ['null', 'No informado'],
        ['selectmultiple', 'Multiple']
    ],
    autocomplete: [
        ['notnull', 'Informado'],
        ['null', 'No informado'],
        ['autocompletemultiple', 'Multiple']
    ],
    image: [
        ['notnull', 'Informado'],
        ['null', 'No informado']
    ]
};
//# sourceMappingURL=data:application/json;base64,