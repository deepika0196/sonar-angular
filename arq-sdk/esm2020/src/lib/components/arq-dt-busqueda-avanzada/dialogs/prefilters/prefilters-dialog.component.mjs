import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { map, of } from 'rxjs';
import { FormBuilder, Validators } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/material/datepicker";
import * as i5 from "@angular/material/form-field";
import * as i6 from "@angular/material/button";
import * as i7 from "@angular/material/input";
import * as i8 from "@angular/material/select";
import * as i9 from "@angular/material/core";
import * as i10 from "@angular/material/toolbar";
import * as i11 from "@angular/material/autocomplete";
import * as i12 from "@ngneat/transloco";
export class ArqPrefiltersDialogComponent {
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.idDatatable = this.data.idDatatable || '';
        this.prefilters = this.data.prefilters || [];
        this.refreshComboFn = this.data.refreshComboFn || function () { };
        this.fixedCol = (colId) => this.prefilters.filter((prefilter) => prefilter.key === colId) || this.prefilters[0];
        const controls = {};
        this.prefilters.forEach((prefilter) => (controls[prefilter.key] = ['', prefilter.isRequired ? [Validators.required] : []]));
        this.formGroup = new FormBuilder().group(controls);
    }
    displayFn(option) {
        return option?.description || '';
    }
    doFilter(evt, column) {
        if (evt.keyCode === 13) {
            return;
        }
        column.dataFn = column.dataFn.pipe(map(val => this.filter(val, this.formGroup.controls[column.key].value)));
    }
    optionSelected(column) {
        this.checkDependent(column);
    }
    filter(val, data) {
        if (!val)
            return [];
        return val.filter(item => item.description.toLowerCase().includes(this.getValue(data).toLowerCase()));
    }
    checkDependent(column) {
        const dependentCols = this.prefilters.filter(prefilter => prefilter.dependsOn && prefilter.dependsOn[0] === column.key);
        dependentCols.forEach(col => {
            const columnSchema = this.prefilters.find(colSchema => colSchema.key === col.key);
            if (!columnSchema)
                return;
            const dependentFilter = this.prefilters.find(prefilter => prefilter.key === columnSchema.key);
            if (dependentFilter)
                this.formGroup.controls[dependentFilter.key].reset();
            this.refrescarCombo({
                idColumn: col.key,
                idDatatable: this.idDatatable,
                queryParams: { [column.key]: this.getValue(this.formGroup.controls[column.key].value) }
            }, columnSchema);
        });
    }
    refrescarCombo(filterComboDynam, columnSchema) {
        this.refreshComboFn(filterComboDynam).subscribe((data) => {
            switch (columnSchema?.type?.toLowerCase()) {
                case 'select':
                case 'image':
                    columnSchema.data = data;
                    break;
                case 'autocomplete':
                    columnSchema.data = data;
                    columnSchema.dataFn = of(data);
                    break;
            }
        });
    }
    getValue(data) {
        return data.value || data;
    }
    onSubmit() {
        // Si hay un autocomplete, tiene que tener un objeto como value, si no lo reseteamos
        this.checkAutocompleteValue();
        // comprobamos el estado del formgroup
        if (this.formGroup.invalid) {
            this.refreshClientValidations(this.formGroup);
            return;
        }
        const addFilterForm = [];
        this.prefilters.forEach(prefilter => {
            if (this.formGroup.controls[prefilter.key]?.value) {
                if (prefilter.type === 'autocomplete') {
                    // en el autocomplete pasamos el objeto
                    addFilterForm.push({ data: [this.formGroup.controls[prefilter.key]?.value], column: prefilter });
                }
                else {
                    addFilterForm.push({
                        data: [this.getValue(this.formGroup.controls[prefilter.key]?.value)],
                        column: prefilter
                    });
                }
            }
        });
        this.dialogRef.close(addFilterForm);
    }
    checkAutocompleteValue() {
        this.prefilters
            .filter(prefilter => prefilter.type === 'autocomplete')
            .forEach(prefilter => {
            if (!this.formGroup.controls[prefilter.key].value?.value) {
                this.formGroup.controls[prefilter.key].reset();
                prefilter.dataFn = of(prefilter.data);
            }
        });
    }
    refreshClientValidations(form) {
        Object.keys(form.controls).forEach(keyControl => {
            if (form.controls[keyControl].status == 'INVALID') {
                form.controls[keyControl].updateValueAndValidity({ onlySelf: true });
                form.controls[keyControl].markAsTouched();
            }
        });
    }
}
ArqPrefiltersDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqPrefiltersDialogComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
ArqPrefiltersDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ArqPrefiltersDialogComponent, selector: "arq-prefilters-dialog", ngImport: i0, template: "<h2 mat-dialog-title>{{ 'DT-BA.PREFILTERS.TITLE' | transloco }}</h2>\r\n<form [formGroup]=\"this.formGroup\" (ngSubmit)=\"onSubmit()\">\r\n  <mat-dialog-content>\r\n    <ng-container *ngFor=\"let prefilter of data.prefilters; let i = index\">\r\n      <mat-toolbar class=\"dt-filter-toolbar\">\r\n        <mat-form-field subscriptSizing=\"dynamic\">\r\n          <mat-select placeholder=\"{{ 'DT-BA.COLUMN' | transloco }}\" [(value)]=\"data.prefilters[i]\">\r\n            <mat-option *ngFor=\"let col of fixedCol(prefilter.key)\" [value]=\"col\">{{ col.label }}</mat-option>\r\n          </mat-select>\r\n          <mat-hint\r\n            class=\"mat-warn\"\r\n            *ngIf=\"formGroup.controls[prefilter.key].touched && formGroup.controls[prefilter.key].errors\"></mat-hint>\r\n        </mat-form-field>\r\n\r\n        <ng-container *ngIf=\"prefilter\" [ngSwitch]=\"prefilter.type\">\r\n          <mat-form-field subscriptSizing=\"dynamic\">\r\n            <input\r\n              *ngSwitchDefault\r\n              formControlName=\"{{ prefilter.key }}\"\r\n              matInput\r\n              type=\"text\"\r\n              [required]=\"true\"\r\n              placeholder=\"{{ 'DT-BA.FILTER' | transloco }}\" />\r\n            <input\r\n              *ngSwitchCase=\"'number'\"\r\n              formControlName=\"{{ prefilter.key }}\"\r\n              matInput\r\n              type=\"number\"\r\n              placeholder=\"{{ 'DT-BA.FILTER' | transloco }}\" />\r\n            <mat-select *ngSwitchCase=\"'boolean'\">\r\n              <mat-option [value]=\"null\"></mat-option>\r\n              <mat-option [value]=\"true\">&#10003;</mat-option>\r\n              <mat-option [value]=\"false\">&#10005;</mat-option>\r\n            </mat-select>\r\n            <mat-select\r\n              *ngSwitchCase=\"'select'\"\r\n              formControlName=\"{{ prefilter.key }}\"\r\n              (selectionChange)=\"optionSelected(prefilter)\">\r\n              <mat-option [value]=\"null\"></mat-option>\r\n              <mat-option *ngFor=\"let col of prefilter.data\" [value]=\"col.value\">\r\n                {{ col.description }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <ng-container *ngSwitchCase=\"'autocomplete'\">\r\n              <input\r\n                matInput\r\n                formControlName=\"{{ prefilter.key }}\"\r\n                [type]=\"'text'\"\r\n                [matAutocomplete]=\"auto\"\r\n                (keyup)=\"doFilter($event, prefilter)\" />\r\n              <mat-autocomplete\r\n                autoActiveFirstOption\r\n                #auto=\"matAutocomplete\"\r\n                class=\"arq-autocomplete\"\r\n                [displayWith]=\"displayFn\"\r\n                (optionSelected)=\"optionSelected(prefilter)\">\r\n                <mat-option *ngFor=\"let col of prefilter.dataFn | async\" [value]=\"col\">\r\n                  {{ col.description }}\r\n                </mat-option>\r\n              </mat-autocomplete>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"'date'\">\r\n              <input\r\n                matInput\r\n                formControlName=\"{{ prefilter.key }}\"\r\n                placeholder=\"DD/MM/AAAA\"\r\n                [matDatepicker]=\"picker\"\r\n                (click)=\"picker.open()\" />\r\n              <mat-datepicker #picker></mat-datepicker>\r\n            </ng-container>\r\n            <mat-select *ngSwitchCase=\"'image'\" formControlName=\"{{ prefilter.key }}\">\r\n              <mat-option [value]=\"null\"></mat-option>\r\n              <mat-option *ngFor=\"let col of prefilter.data\" [value]=\"col.value\">\r\n                {{ col.description }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-hint\r\n              style=\"color: red\"\r\n              *ngIf=\"formGroup.controls[prefilter.key].touched && formGroup.controls[prefilter.key].errors\">\r\n              {{ 'DT-BA.PREFILTERS.REQUIRED' | transloco }}\r\n            </mat-hint>\r\n          </mat-form-field>\r\n          <br />\r\n        </ng-container>\r\n      </mat-toolbar>\r\n    </ng-container>\r\n  </mat-dialog-content>\r\n\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-button type=\"submit\">\r\n      {{ 'DT-BA.FILTERV' | transloco }}\r\n    </button>\r\n  </mat-dialog-actions>\r\n</form>\r\n", styles: [".dt-filter-toolbar{background-color:#fff}mat-toolbar button{margin-right:.5em}.dt-filter-toolbar mat-form-field,.dt-filter-toolbar button{margin-right:1em}.dt-filter-toolbar mat-form-field{margin-top:1.5em}.dt-filter-toolbar mat-form-field ::ng-deep .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:.8em!important;padding-bottom:.8em!important}.dt-filter-toolbar mat-form-field ::ng-deep .mat-mdc-form-field-infix{min-height:0!important}button{border-radius:0!important;height:2.6em;min-height:2.6em;font-size:16px}button:not([disabled]):hover{background-color:#0c556d;color:#fff;border-radius:0}button[disabled]{color:#1e1d1d;background-color:#acacac}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i2.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "directive", type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i4.MatDatepicker, selector: "mat-datepicker", exportAs: ["matDatepicker"] }, { kind: "directive", type: i4.MatDatepickerInput, selector: "input[matDatepicker]", inputs: ["matDatepicker", "min", "max", "matDatepickerFilter"], exportAs: ["matDatepickerInput"] }, { kind: "component", type: i5.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i5.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { kind: "component", type: i6.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "directive", type: i7.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i8.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator"], exportAs: ["matSelect"] }, { kind: "component", type: i9.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "component", type: i10.MatToolbar, selector: "mat-toolbar", inputs: ["color"], exportAs: ["matToolbar"] }, { kind: "component", type: i11.MatAutocomplete, selector: "mat-autocomplete", inputs: ["disableRipple", "hideSingleSelectionIndicator"], exportAs: ["matAutocomplete"] }, { kind: "directive", type: i11.MatAutocompleteTrigger, selector: "input[matAutocomplete], textarea[matAutocomplete]", exportAs: ["matAutocompleteTrigger"] }, { kind: "directive", type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "directive", type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { kind: "directive", type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i12.TranslocoPipe, name: "transloco" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqPrefiltersDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arq-prefilters-dialog', template: "<h2 mat-dialog-title>{{ 'DT-BA.PREFILTERS.TITLE' | transloco }}</h2>\r\n<form [formGroup]=\"this.formGroup\" (ngSubmit)=\"onSubmit()\">\r\n  <mat-dialog-content>\r\n    <ng-container *ngFor=\"let prefilter of data.prefilters; let i = index\">\r\n      <mat-toolbar class=\"dt-filter-toolbar\">\r\n        <mat-form-field subscriptSizing=\"dynamic\">\r\n          <mat-select placeholder=\"{{ 'DT-BA.COLUMN' | transloco }}\" [(value)]=\"data.prefilters[i]\">\r\n            <mat-option *ngFor=\"let col of fixedCol(prefilter.key)\" [value]=\"col\">{{ col.label }}</mat-option>\r\n          </mat-select>\r\n          <mat-hint\r\n            class=\"mat-warn\"\r\n            *ngIf=\"formGroup.controls[prefilter.key].touched && formGroup.controls[prefilter.key].errors\"></mat-hint>\r\n        </mat-form-field>\r\n\r\n        <ng-container *ngIf=\"prefilter\" [ngSwitch]=\"prefilter.type\">\r\n          <mat-form-field subscriptSizing=\"dynamic\">\r\n            <input\r\n              *ngSwitchDefault\r\n              formControlName=\"{{ prefilter.key }}\"\r\n              matInput\r\n              type=\"text\"\r\n              [required]=\"true\"\r\n              placeholder=\"{{ 'DT-BA.FILTER' | transloco }}\" />\r\n            <input\r\n              *ngSwitchCase=\"'number'\"\r\n              formControlName=\"{{ prefilter.key }}\"\r\n              matInput\r\n              type=\"number\"\r\n              placeholder=\"{{ 'DT-BA.FILTER' | transloco }}\" />\r\n            <mat-select *ngSwitchCase=\"'boolean'\">\r\n              <mat-option [value]=\"null\"></mat-option>\r\n              <mat-option [value]=\"true\">&#10003;</mat-option>\r\n              <mat-option [value]=\"false\">&#10005;</mat-option>\r\n            </mat-select>\r\n            <mat-select\r\n              *ngSwitchCase=\"'select'\"\r\n              formControlName=\"{{ prefilter.key }}\"\r\n              (selectionChange)=\"optionSelected(prefilter)\">\r\n              <mat-option [value]=\"null\"></mat-option>\r\n              <mat-option *ngFor=\"let col of prefilter.data\" [value]=\"col.value\">\r\n                {{ col.description }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <ng-container *ngSwitchCase=\"'autocomplete'\">\r\n              <input\r\n                matInput\r\n                formControlName=\"{{ prefilter.key }}\"\r\n                [type]=\"'text'\"\r\n                [matAutocomplete]=\"auto\"\r\n                (keyup)=\"doFilter($event, prefilter)\" />\r\n              <mat-autocomplete\r\n                autoActiveFirstOption\r\n                #auto=\"matAutocomplete\"\r\n                class=\"arq-autocomplete\"\r\n                [displayWith]=\"displayFn\"\r\n                (optionSelected)=\"optionSelected(prefilter)\">\r\n                <mat-option *ngFor=\"let col of prefilter.dataFn | async\" [value]=\"col\">\r\n                  {{ col.description }}\r\n                </mat-option>\r\n              </mat-autocomplete>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"'date'\">\r\n              <input\r\n                matInput\r\n                formControlName=\"{{ prefilter.key }}\"\r\n                placeholder=\"DD/MM/AAAA\"\r\n                [matDatepicker]=\"picker\"\r\n                (click)=\"picker.open()\" />\r\n              <mat-datepicker #picker></mat-datepicker>\r\n            </ng-container>\r\n            <mat-select *ngSwitchCase=\"'image'\" formControlName=\"{{ prefilter.key }}\">\r\n              <mat-option [value]=\"null\"></mat-option>\r\n              <mat-option *ngFor=\"let col of prefilter.data\" [value]=\"col.value\">\r\n                {{ col.description }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-hint\r\n              style=\"color: red\"\r\n              *ngIf=\"formGroup.controls[prefilter.key].touched && formGroup.controls[prefilter.key].errors\">\r\n              {{ 'DT-BA.PREFILTERS.REQUIRED' | transloco }}\r\n            </mat-hint>\r\n          </mat-form-field>\r\n          <br />\r\n        </ng-container>\r\n      </mat-toolbar>\r\n    </ng-container>\r\n  </mat-dialog-content>\r\n\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-button type=\"submit\">\r\n      {{ 'DT-BA.FILTERV' | transloco }}\r\n    </button>\r\n  </mat-dialog-actions>\r\n</form>\r\n", styles: [".dt-filter-toolbar{background-color:#fff}mat-toolbar button{margin-right:.5em}.dt-filter-toolbar mat-form-field,.dt-filter-toolbar button{margin-right:1em}.dt-filter-toolbar mat-form-field{margin-top:1.5em}.dt-filter-toolbar mat-form-field ::ng-deep .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:.8em!important;padding-bottom:.8em!important}.dt-filter-toolbar mat-form-field ::ng-deep .mat-mdc-form-field-infix{min-height:0!important}button{border-radius:0!important;height:2.6em;min-height:2.6em;font-size:16px}button:not([disabled]):hover{background-color:#0c556d;color:#fff;border-radius:0}button[disabled]{color:#1e1d1d;background-color:#acacac}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,