import { COMMA, ENTER } from '@angular/cdk/keycodes';
import { Component, Input, ViewChild, ViewEncapsulation } from '@angular/core';
import { ArqGenericInputComponent } from '../../../core/arq-generic-input/arq-generic-input.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/chips";
import * as i2 from "@angular/material/icon";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/common";
import * as i6 from "../arq-form-control-error/arq-form-control-error.component";
export class ArqChipsComponent extends ArqGenericInputComponent {
    constructor() {
        super();
        this.selectable = true;
        this.removable = true;
        this.selectableChip = true;
        this.addOnBlur = true;
        this.separatorKeysCodes = [ENTER, COMMA];
    }
    add(event) {
        const input = event.chipInput;
        const value = event.value;
        if ((value || '').trim()) {
            let val = this.value && this.fGroup?.controls[this.value].value ? this.fGroup?.controls[this.value].value : [];
            this.fGroup?.controls[this.value].setValue([...val, value.trim()]);
            this.fGroup?.controls[this.value].updateValueAndValidity();
            this.ngChanges();
        }
    }
    remove(elem) {
        const index = this.fGroup?.controls[this.value].value.indexOf(elem);
        if (index >= 0) {
            this.fGroup?.controls[this.value].value.splice(index, 1);
            this.fGroup?.controls[this.value].updateValueAndValidity();
            this.ngChanges();
        }
    }
    comprobarEntradas() { }
}
ArqChipsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqChipsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ArqChipsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ArqChipsComponent, selector: "arq-chips", inputs: { placeholderadd: "placeholderadd", compareWith: "compareWith", selectable: "selectable", role: "role", multiple: "multiple", color: "color", disabled: "disabled", removable: "removable", roleChip: "roleChip", selectableChip: "selectableChip" }, viewQueries: [{ propertyName: "chipInput", first: true, predicate: ["chipInput"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<label *ngIf=\"this.label\">{{ this.label }}</label>\r\n<mat-form-field appearance=\"outline\" class=\"chip-list\">\r\n  <mat-chip-grid #chipList aria-label=\"this.label\" [formControl]=\"this.getValue()\" multiple>\r\n    <mat-chip-row\r\n      *ngFor=\"let chip of this.getValue()?.value\"\r\n      [editable]=\"!removable\"\r\n      [removable]=\"removable\"\r\n      (removed)=\"remove(chip)\"\r\n      color=\"primary\">\r\n      {{ chip }}\r\n      <button matChipRemove>\r\n        <mat-icon>cancel</mat-icon>\r\n      </button>\r\n    </mat-chip-row>\r\n    <input\r\n      #chipInput\r\n      placeholder=\"{{ this.placeholderadd }}\"\r\n      [matChipInputFor]=\"chipList\"\r\n      [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n      [matChipInputAddOnBlur]=\"addOnBlur\"\r\n      (matChipInputTokenEnd)=\"add($event)\" />\r\n  </mat-chip-grid>\r\n  <mat-error\r\n    arq-form-control-error\r\n    [labelControl]=\"this.label\"\r\n    [formControlSibling]=\"this.getValue()\"\r\n  ></mat-error>\r\n</mat-form-field>\r\n", styles: [".chip-list{width:100%}.button-container>button{margin:0 12px}.mat-chip-selected{background-color:#000!important;color:#fff}.assigned-chip{background-color:#000;color:#fff}.mat-mdc-chip.mat-mdc-standard-chip{background-color:#11799b;color:#fff}\n"], dependencies: [{ kind: "component", type: i1.MatChipGrid, selector: "mat-chip-grid", inputs: ["tabIndex", "disabled", "placeholder", "required", "value", "errorStateMatcher"], outputs: ["change", "valueChange"] }, { kind: "directive", type: i1.MatChipInput, selector: "input[matChipInputFor]", inputs: ["matChipInputFor", "matChipInputAddOnBlur", "matChipInputSeparatorKeyCodes", "placeholder", "id", "disabled"], outputs: ["matChipInputTokenEnd"], exportAs: ["matChipInput", "matChipInputFor"] }, { kind: "directive", type: i1.MatChipRemove, selector: "[matChipRemove]" }, { kind: "component", type: i1.MatChipRow, selector: "mat-chip-row, [mat-chip-row], mat-basic-chip-row, [mat-basic-chip-row]", inputs: ["color", "disabled", "disableRipple", "tabIndex", "editable"], outputs: ["edited"] }, { kind: "component", type: i2.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i3.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i3.MatError, selector: "mat-error, [matError]", inputs: ["id"] }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i6.ArqFormControlErrorComponent, selector: "[arq-form-control-error]", inputs: ["labelControl", "errorMapMessages", "formControlSibling"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqChipsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arq-chips', encapsulation: ViewEncapsulation.None, template: "<label *ngIf=\"this.label\">{{ this.label }}</label>\r\n<mat-form-field appearance=\"outline\" class=\"chip-list\">\r\n  <mat-chip-grid #chipList aria-label=\"this.label\" [formControl]=\"this.getValue()\" multiple>\r\n    <mat-chip-row\r\n      *ngFor=\"let chip of this.getValue()?.value\"\r\n      [editable]=\"!removable\"\r\n      [removable]=\"removable\"\r\n      (removed)=\"remove(chip)\"\r\n      color=\"primary\">\r\n      {{ chip }}\r\n      <button matChipRemove>\r\n        <mat-icon>cancel</mat-icon>\r\n      </button>\r\n    </mat-chip-row>\r\n    <input\r\n      #chipInput\r\n      placeholder=\"{{ this.placeholderadd }}\"\r\n      [matChipInputFor]=\"chipList\"\r\n      [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n      [matChipInputAddOnBlur]=\"addOnBlur\"\r\n      (matChipInputTokenEnd)=\"add($event)\" />\r\n  </mat-chip-grid>\r\n  <mat-error\r\n    arq-form-control-error\r\n    [labelControl]=\"this.label\"\r\n    [formControlSibling]=\"this.getValue()\"\r\n  ></mat-error>\r\n</mat-form-field>\r\n", styles: [".chip-list{width:100%}.button-container>button{margin:0 12px}.mat-chip-selected{background-color:#000!important;color:#fff}.assigned-chip{background-color:#000;color:#fff}.mat-mdc-chip.mat-mdc-standard-chip{background-color:#11799b;color:#fff}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { placeholderadd: [{
                type: Input
            }], compareWith: [{
                type: Input
            }], selectable: [{
                type: Input
            }], role: [{
                type: Input
            }], multiple: [{
                type: Input
            }], color: [{
                type: Input
            }], disabled: [{
                type: Input
            }], removable: [{
                type: Input
            }], roleChip: [{
                type: Input
            }], selectableChip: [{
                type: Input
            }], chipInput: [{
                type: ViewChild,
                args: ['chipInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJxLWNoaXBzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2FycS1zZGsvc3JjL2xpYi9jb21wb25lbnRzL2FycS1jaGlwcy9hcnEtY2hpcHMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vYXJxLXNkay9zcmMvbGliL2NvbXBvbmVudHMvYXJxLWNoaXBzL2FycS1jaGlwcy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQWMsS0FBSyxFQUFVLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUluRyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw2REFBNkQsQ0FBQzs7Ozs7Ozs7QUFRdkcsTUFBTSxPQUFPLGlCQUFrQixTQUFRLHdCQUF3QjtJQXFDN0Q7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQTlCVixlQUFVLEdBQVksSUFBSSxDQUFDO1FBZ0IzQixjQUFTLEdBQVksSUFBSSxDQUFDO1FBTTFCLG1CQUFjLEdBQVksSUFBSSxDQUFDO1FBSS9CLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDUix1QkFBa0IsR0FBYSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUl2RCxDQUFDO0lBRUQsR0FBRyxDQUFDLEtBQXdCO1FBQzFCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDOUIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUUxQixJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3hCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQy9HLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ25FLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBQzNELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNsQjtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsSUFBWTtRQUNqQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVwRSxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDekQsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLHNCQUFzQixFQUFFLENBQUM7WUFDM0QsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVELGlCQUFpQixLQUFVLENBQUM7OzhHQS9EakIsaUJBQWlCO2tHQUFqQixpQkFBaUIsOGFDYjlCLG9oQ0E0QkE7MkZEZmEsaUJBQWlCO2tCQU43QixTQUFTOytCQUNFLFdBQVcsaUJBR04saUJBQWlCLENBQUMsSUFBSTswRUFJckMsY0FBYztzQkFEYixLQUFLO2dCQUlOLFdBQVc7c0JBRFYsS0FBSztnQkFJTixVQUFVO3NCQURULEtBQUs7Z0JBSU4sSUFBSTtzQkFESCxLQUFLO2dCQUlOLFFBQVE7c0JBRFAsS0FBSztnQkFLTixLQUFLO3NCQURKLEtBQUs7Z0JBSU4sUUFBUTtzQkFEUCxLQUFLO2dCQUlOLFNBQVM7c0JBRFIsS0FBSztnQkFJTixRQUFRO3NCQURQLEtBQUs7Z0JBSU4sY0FBYztzQkFEYixLQUFLO2dCQUdrQixTQUFTO3NCQUFoQyxTQUFTO3VCQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDT01NQSwgRU5URVIgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkluaXQsIFZpZXdDaGlsZCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWF0Q2hpcElucHV0RXZlbnQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jaGlwcyc7XHJcbmltcG9ydCB7IFRoZW1lUGFsZXR0ZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgQXJxR2VuZXJpY0lucHV0Q29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vY29yZS9hcnEtZ2VuZXJpYy1pbnB1dC9hcnEtZ2VuZXJpYy1pbnB1dC5jb21wb25lbnQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcnEtY2hpcHMnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9hcnEtY2hpcHMuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2FycS1jaGlwcy5jb21wb25lbnQuY3NzJ10sXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQXJxQ2hpcHNDb21wb25lbnQgZXh0ZW5kcyBBcnFHZW5lcmljSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBJbnB1dCgpXHJcbiAgcGxhY2Vob2xkZXJhZGQhOiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgY29tcGFyZVdpdGg/OiAobzE6IGFueSwgbzI6IGFueSkgPT4gYm9vbGVhbjtcclxuXHJcbiAgQElucHV0KClcclxuICBzZWxlY3RhYmxlOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgQElucHV0KClcclxuICByb2xlPzogc3RyaW5nIHwgbnVsbDtcclxuXHJcbiAgQElucHV0KClcclxuICBtdWx0aXBsZT86IGJvb2xlYW47XHJcblxyXG4gIC8vQ2hpcCBQcm9wZXJ0aWVzXHJcbiAgQElucHV0KClcclxuICBjb2xvcjogVGhlbWVQYWxldHRlO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcclxuXHJcbiAgQElucHV0KClcclxuICByZW1vdmFibGU6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHJvbGVDaGlwPzogc3RyaW5nO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHNlbGVjdGFibGVDaGlwOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgQFZpZXdDaGlsZCgnY2hpcElucHV0JykgY2hpcElucHV0PzogRWxlbWVudFJlZjxIVE1MSW5wdXRFbGVtZW50PjtcclxuXHJcbiAgYWRkT25CbHVyID0gdHJ1ZTtcclxuICByZWFkb25seSBzZXBhcmF0b3JLZXlzQ29kZXM6IG51bWJlcltdID0gW0VOVEVSLCBDT01NQV07XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIGFkZChldmVudDogTWF0Q2hpcElucHV0RXZlbnQpOiB2b2lkIHtcclxuICAgIGNvbnN0IGlucHV0ID0gZXZlbnQuY2hpcElucHV0O1xyXG4gICAgY29uc3QgdmFsdWUgPSBldmVudC52YWx1ZTtcclxuXHJcbiAgICBpZiAoKHZhbHVlIHx8ICcnKS50cmltKCkpIHtcclxuICAgICAgbGV0IHZhbCA9IHRoaXMudmFsdWUgJiYgdGhpcy5mR3JvdXA/LmNvbnRyb2xzW3RoaXMudmFsdWVdLnZhbHVlID8gdGhpcy5mR3JvdXA/LmNvbnRyb2xzW3RoaXMudmFsdWVdLnZhbHVlIDogW107XHJcbiAgICAgIHRoaXMuZkdyb3VwPy5jb250cm9sc1t0aGlzLnZhbHVlXS5zZXRWYWx1ZShbLi4udmFsLCB2YWx1ZS50cmltKCldKTtcclxuICAgICAgdGhpcy5mR3JvdXA/LmNvbnRyb2xzW3RoaXMudmFsdWVdLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcclxuICAgICAgdGhpcy5uZ0NoYW5nZXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbW92ZShlbGVtOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5mR3JvdXA/LmNvbnRyb2xzW3RoaXMudmFsdWVdLnZhbHVlLmluZGV4T2YoZWxlbSk7XHJcblxyXG4gICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgdGhpcy5mR3JvdXA/LmNvbnRyb2xzW3RoaXMudmFsdWVdLnZhbHVlLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgIHRoaXMuZkdyb3VwPy5jb250cm9sc1t0aGlzLnZhbHVlXS51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7XHJcbiAgICAgIHRoaXMubmdDaGFuZ2VzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb21wcm9iYXJFbnRyYWRhcygpOiB2b2lkIHt9XHJcbn1cclxuIiwiPGxhYmVsICpuZ0lmPVwidGhpcy5sYWJlbFwiPnt7IHRoaXMubGFiZWwgfX08L2xhYmVsPlxyXG48bWF0LWZvcm0tZmllbGQgYXBwZWFyYW5jZT1cIm91dGxpbmVcIiBjbGFzcz1cImNoaXAtbGlzdFwiPlxyXG4gIDxtYXQtY2hpcC1ncmlkICNjaGlwTGlzdCBhcmlhLWxhYmVsPVwidGhpcy5sYWJlbFwiIFtmb3JtQ29udHJvbF09XCJ0aGlzLmdldFZhbHVlKClcIiBtdWx0aXBsZT5cclxuICAgIDxtYXQtY2hpcC1yb3dcclxuICAgICAgKm5nRm9yPVwibGV0IGNoaXAgb2YgdGhpcy5nZXRWYWx1ZSgpPy52YWx1ZVwiXHJcbiAgICAgIFtlZGl0YWJsZV09XCIhcmVtb3ZhYmxlXCJcclxuICAgICAgW3JlbW92YWJsZV09XCJyZW1vdmFibGVcIlxyXG4gICAgICAocmVtb3ZlZCk9XCJyZW1vdmUoY2hpcClcIlxyXG4gICAgICBjb2xvcj1cInByaW1hcnlcIj5cclxuICAgICAge3sgY2hpcCB9fVxyXG4gICAgICA8YnV0dG9uIG1hdENoaXBSZW1vdmU+XHJcbiAgICAgICAgPG1hdC1pY29uPmNhbmNlbDwvbWF0LWljb24+XHJcbiAgICAgIDwvYnV0dG9uPlxyXG4gICAgPC9tYXQtY2hpcC1yb3c+XHJcbiAgICA8aW5wdXRcclxuICAgICAgI2NoaXBJbnB1dFxyXG4gICAgICBwbGFjZWhvbGRlcj1cInt7IHRoaXMucGxhY2Vob2xkZXJhZGQgfX1cIlxyXG4gICAgICBbbWF0Q2hpcElucHV0Rm9yXT1cImNoaXBMaXN0XCJcclxuICAgICAgW21hdENoaXBJbnB1dFNlcGFyYXRvcktleUNvZGVzXT1cInNlcGFyYXRvcktleXNDb2Rlc1wiXHJcbiAgICAgIFttYXRDaGlwSW5wdXRBZGRPbkJsdXJdPVwiYWRkT25CbHVyXCJcclxuICAgICAgKG1hdENoaXBJbnB1dFRva2VuRW5kKT1cImFkZCgkZXZlbnQpXCIgLz5cclxuICA8L21hdC1jaGlwLWdyaWQ+XHJcbiAgPG1hdC1lcnJvclxyXG4gICAgYXJxLWZvcm0tY29udHJvbC1lcnJvclxyXG4gICAgW2xhYmVsQ29udHJvbF09XCJ0aGlzLmxhYmVsXCJcclxuICAgIFtmb3JtQ29udHJvbFNpYmxpbmddPVwidGhpcy5nZXRWYWx1ZSgpXCJcclxuICA+PC9tYXQtZXJyb3I+XHJcbjwvbWF0LWZvcm0tZmllbGQ+XHJcbiJdfQ==