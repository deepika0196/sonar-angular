import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { ArqDatepickerComponent, dateProviders } from '../arq-datepicker/arq-datepicker.component';
import { DatePipe } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/material/datepicker";
import * as i4 from "@angular/material/form-field";
import * as i5 from "@angular/material/tooltip";
import * as i6 from "../arq-form-control-error/arq-form-control-error.component";
export class ArqDatepickerRangeComponent extends ArqDatepickerComponent {
    constructor(datePipe) {
        super(datePipe);
        this.datePipe = datePipe;
        this.visibleRange = true;
        this.rangeLabel = '';
        this.selectionChange = new EventEmitter();
    }
    ngOnChanges(changes) {
        if (changes)
            this.setValueDate();
    }
    ngOnInit() {
        this.addControEnd();
        this.validateDate();
        // Disable funcionality
        if (typeof this.disabled === 'string') {
            this.fGroup.controls[this.value].disable();
            this.fGroup.controls[this.fechaFin].disable();
        }
        else if (typeof this.disabled === 'boolean' && this.disabled) {
            this.fGroup.controls[this.value].disable();
            this.fGroup.controls[this.fechaFin].disable();
        }
    }
    addControEnd() {
        this.setFG(this.fechaFin);
    }
    dateRangeChange(dateRangeStart, dateRangeEnd) {
        this.selectionChange.emit({
            start: dateRangeStart.value,
            end: dateRangeEnd.value
        });
    }
    getFechaFinCntr() {
        if (this.fGroup?.controls[this.fechaFin].value) {
            this.fGroup?.controls[this.fechaFin].setValue(new Date(this.fGroup?.controls[this.fechaFin].value));
        }
        return this.fGroup?.controls[this.fechaFin];
    }
}
ArqDatepickerRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqDatepickerRangeComponent, deps: [{ token: i1.DatePipe }], target: i0.ɵɵFactoryTarget.Component });
ArqDatepickerRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ArqDatepickerRangeComponent, selector: "arq-datepicker-range", inputs: { labelErrorStart: "labelErrorStart", labelErrorEnd: "labelErrorEnd", visibleRange: "visibleRange", rangeLabel: "rangeLabel", placeholderStart: "placeholderStart", placeholderEnd: "placeholderEnd", fechaFin: "fechaFin" }, outputs: { selectionChange: "selectionChange" }, providers: [dateProviders, DatePipe], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<label *ngIf=\"this.label\"\r\n  >{{ this.label }}\r\n  <span *ngIf=\"this.getValidations()\" class=\"text-danger\"> * </span>\r\n</label>\r\n<mat-form-field appearance=\"outline\" class=\"full-width type-date pb-0\" [class]=\"sizeInput\" *ngIf=\"this.getValue()\">\r\n  <mat-date-range-input [rangePicker]=\"picker\">\r\n    <input\r\n      matStartDate\r\n      [formControl]=\"this.getValue()\"\r\n      [placeholder]=\"placeholderStart\"\r\n      #dateRangeStart\r\n      #tooltip=\"matTooltip\"\r\n      [matTooltip]=\"this.message\"\r\n      [matTooltipPosition]=\"this.positionTooltip\"\r\n      [matTooltipHideDelay]=\"this.hideDelay\" />\r\n    <input\r\n      matEndDate\r\n      [formControl]=\"this.getFechaFinCntr()\"\r\n      [placeholder]=\"placeholderEnd\"\r\n      (dateChange)=\"dateRangeChange(dateRangeStart, dateRangeEnd)\"\r\n      (blur)=\"validateValue()\"\r\n      #dateRangeEnd />\r\n  </mat-date-range-input>\r\n\r\n  <mat-hint *ngIf=\"hint\">{{ this.hint }} - {{ this.hint }}</mat-hint>\r\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n  <mat-date-range-picker #picker [disabled]=\"this.isDisabled()\"></mat-date-range-picker>\r\n\r\n  <!-- TODO este componente esta todo comentado por lo que doy por echo que esta a medias,\r\n    dejo aqui la manera en la que se estaban controlando los errores hasta ahora por si se necesitase\r\n    probar\r\n  <mat-error *ngIf=\"this.getValue()?.hasError('matStartDateInvalid')\">{{ this.labelErrorStart }}</mat-error>\r\n  <mat-error *ngIf=\"this.fechaFinCntr?.hasError('matEndDateInvalid')\">{{ this.labelErrorEnd }}</mat-error>\r\n  -->\r\n  <mat-error arq-form-control-error [labelControl]=\"this.label\" [formControlSibling]=\"this.getValue()\"></mat-error>\r\n</mat-form-field>\r\n<p *ngIf=\"this.visibleRange && this.getValue()\">\r\n  {{ this.rangeLabel }}: {{ this.getValue().value | date : 'dd/MM/yyyy' }} -\r\n  {{ this.fechaFinCntr.value | date : 'dd/MM/yyyy' }}\r\n</p>\r\n", styles: [".full-width{width:100%}\n"], dependencies: [{ kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.MatDatepickerToggle, selector: "mat-datepicker-toggle", inputs: ["for", "tabIndex", "aria-label", "disabled", "disableRipple"], exportAs: ["matDatepickerToggle"] }, { kind: "component", type: i3.MatDateRangeInput, selector: "mat-date-range-input", inputs: ["rangePicker", "required", "dateFilter", "min", "max", "disabled", "separator", "comparisonStart", "comparisonEnd"], exportAs: ["matDateRangeInput"] }, { kind: "directive", type: i3.MatStartDate, selector: "input[matStartDate]", inputs: ["errorStateMatcher"], outputs: ["dateChange", "dateInput"] }, { kind: "directive", type: i3.MatEndDate, selector: "input[matEndDate]", inputs: ["errorStateMatcher"], outputs: ["dateChange", "dateInput"] }, { kind: "component", type: i3.MatDateRangePicker, selector: "mat-date-range-picker", exportAs: ["matDateRangePicker"] }, { kind: "component", type: i4.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i4.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { kind: "directive", type: i4.MatError, selector: "mat-error, [matError]", inputs: ["id"] }, { kind: "directive", type: i4.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]", inputs: ["matTextSuffix"] }, { kind: "directive", type: i5.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "component", type: i6.ArqFormControlErrorComponent, selector: "[arq-form-control-error]", inputs: ["labelControl", "errorMapMessages", "formControlSibling"] }, { kind: "pipe", type: i1.DatePipe, name: "date" }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqDatepickerRangeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arq-datepicker-range', encapsulation: ViewEncapsulation.None, providers: [dateProviders, DatePipe], template: "<label *ngIf=\"this.label\"\r\n  >{{ this.label }}\r\n  <span *ngIf=\"this.getValidations()\" class=\"text-danger\"> * </span>\r\n</label>\r\n<mat-form-field appearance=\"outline\" class=\"full-width type-date pb-0\" [class]=\"sizeInput\" *ngIf=\"this.getValue()\">\r\n  <mat-date-range-input [rangePicker]=\"picker\">\r\n    <input\r\n      matStartDate\r\n      [formControl]=\"this.getValue()\"\r\n      [placeholder]=\"placeholderStart\"\r\n      #dateRangeStart\r\n      #tooltip=\"matTooltip\"\r\n      [matTooltip]=\"this.message\"\r\n      [matTooltipPosition]=\"this.positionTooltip\"\r\n      [matTooltipHideDelay]=\"this.hideDelay\" />\r\n    <input\r\n      matEndDate\r\n      [formControl]=\"this.getFechaFinCntr()\"\r\n      [placeholder]=\"placeholderEnd\"\r\n      (dateChange)=\"dateRangeChange(dateRangeStart, dateRangeEnd)\"\r\n      (blur)=\"validateValue()\"\r\n      #dateRangeEnd />\r\n  </mat-date-range-input>\r\n\r\n  <mat-hint *ngIf=\"hint\">{{ this.hint }} - {{ this.hint }}</mat-hint>\r\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n  <mat-date-range-picker #picker [disabled]=\"this.isDisabled()\"></mat-date-range-picker>\r\n\r\n  <!-- TODO este componente esta todo comentado por lo que doy por echo que esta a medias,\r\n    dejo aqui la manera en la que se estaban controlando los errores hasta ahora por si se necesitase\r\n    probar\r\n  <mat-error *ngIf=\"this.getValue()?.hasError('matStartDateInvalid')\">{{ this.labelErrorStart }}</mat-error>\r\n  <mat-error *ngIf=\"this.fechaFinCntr?.hasError('matEndDateInvalid')\">{{ this.labelErrorEnd }}</mat-error>\r\n  -->\r\n  <mat-error arq-form-control-error [labelControl]=\"this.label\" [formControlSibling]=\"this.getValue()\"></mat-error>\r\n</mat-form-field>\r\n<p *ngIf=\"this.visibleRange && this.getValue()\">\r\n  {{ this.rangeLabel }}: {{ this.getValue().value | date : 'dd/MM/yyyy' }} -\r\n  {{ this.fechaFinCntr.value | date : 'dd/MM/yyyy' }}\r\n</p>\r\n", styles: [".full-width{width:100%}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DatePipe }]; }, propDecorators: { labelErrorStart: [{
                type: Input
            }], labelErrorEnd: [{
                type: Input
            }], visibleRange: [{
                type: Input
            }], rangeLabel: [{
                type: Input
            }], placeholderStart: [{
                type: Input
            }], placeholderEnd: [{
                type: Input
            }], fechaFin: [{
                type: Input
            }], selectionChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,