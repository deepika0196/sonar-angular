import { DatePipe } from '@angular/common';
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { MAT_MOMENT_DATE_ADAPTER_OPTIONS } from '@angular/material-moment-adapter';
import { MTX_DATETIME_FORMATS } from '@ng-matero/extensions/core';
import { isMoment } from 'moment';
import { ArqGenericInputComponent } from '../../../core/arq-generic-input/arq-generic-input.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/material/input";
import * as i4 from "@angular/material/form-field";
import * as i5 from "@ng-matero/extensions/datetimepicker";
import * as i6 from "../arq-form-control-error/arq-form-control-error.component";
export const MY_FORMATS_TIME = {
    parse: {
        dateInput: 'DD/MM/YYYY',
        monthInput: 'MMMM',
        yearInput: 'YYYY',
        timeInput: 'HH:mm',
        datetimeInput: 'DD/MM/YYYY HH:mm'
    },
    display: {
        dateInput: 'DD/MM/YYYY',
        monthYearLabel: 'MMMM YYYY',
        dateA11yLabel: 'LL',
        monthYearA11yLabel: 'MMMM YYYY',
        monthInput: 'MMMM',
        yearInput: 'YYYY',
        timeInput: 'HH:mm',
        datetimeInput: 'DD/MM/YYYY HH:mm',
        popupHeaderDateLabel: 'MMM DD, ddd'
    }
};
export const dateTimeProviders = [
    { provide: MTX_DATETIME_FORMATS, useValue: MY_FORMATS_TIME },
    { provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS, useValue: { strict: true } },
    { provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS, useValue: { useUtc: false } }
];
export class ArqDateTimepickerComponent extends ArqGenericInputComponent {
    constructor(datePipe) {
        super();
        this.datePipe = datePipe;
        this.withHours = false;
        this.type = 'datetime';
        this.mode = 'portrait';
        this.multiYearSelector = false;
        this.startView = 'month';
        this.twelvehour = false;
        this.timeInterval = 1;
        this.touchUi = false;
        this.timeInput = true;
    }
    ngOnInit() {
        this.validateDate();
        let formControl = this.getValue();
        formControl.valueChanges.subscribe((value) => {
            if (value && isMoment(value)) {
                // Por defecto, usa la fecha seleccionada como UTC y le suma +1/+2 al convertir a date.
                // De esta manera forzamos que la fecha seleccionada sea realmente la local.
                //
                // No devuelve bien las fechas configurando MAT_DATE_LOCALE, ni estableciendo el locale
                // de moment, ni DateAdapter en constructor.
                formControl.setValue(new Date(value.year(), value.month(), value.date(), value.hour(), value.minute(), value.second(), value.millisecond()), { emitEvent: false });
                this.ngChanges();
            }
        });
        // Disable funcionality
        if (typeof this.disabled === 'string')
            this.fGroup.controls[this.value].disable();
        else if (typeof this.disabled === 'boolean' && this.disabled)
            this.fGroup.controls[this.value].disable();
    }
    ngSetValue(evt) {
        this.setValue(evt);
        this.ngChanges();
    }
    isDisabled() {
        if (this.fGroup) {
            return this.fGroup.controls[this.value].disabled;
        }
        return false;
    }
    comprobarEntradas() { }
}
ArqDateTimepickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqDateTimepickerComponent, deps: [{ token: i1.DatePipe }], target: i0.ɵɵFactoryTarget.Component });
ArqDateTimepickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ArqDateTimepickerComponent, selector: "arq-datetimepicker", inputs: { withHours: "withHours", hint: "hint", disabled: "disabled" }, providers: [dateTimeProviders, DatePipe], usesInheritance: true, ngImport: i0, template: "<label *ngIf=\"this.label\"\r\n  >{{ this.label }}\r\n  <span *ngIf=\"this.getValidations()\" class=\"text-danger\"> * </span>\r\n</label>\r\n<mat-form-field appearance=\"outline\" *ngIf=\"this.getValue()\" [class]=\"sizeInput\" class=\"type-date pb-0\">\r\n  <mtx-datetimepicker\r\n    #datetimePicker\r\n    [type]=\"type\"\r\n    [mode]=\"mode\"\r\n    [multiYearSelector]=\"multiYearSelector\"\r\n    [startView]=\"startView\"\r\n    [twelvehour]=\"twelvehour\"\r\n    [timeInterval]=\"timeInterval\"\r\n    [touchUi]=\"touchUi\"\r\n    [timeInput]=\"timeInput\"\r\n    [disabled]=\"this.isDisabled()\"\r\n    (blur)=\"validateValue()\">\r\n  </mtx-datetimepicker>\r\n  <mat-error arq-form-control-error [labelControl]=\"this.label\" [formControlSibling]=\"this.getValue()\"></mat-error>\r\n  <mat-hint *ngIf=\"hint\">{{ this.hint }}</mat-hint>\r\n  <input [mtxDatetimepicker]=\"datetimePicker\" matInput [formControl]=\"this.getValue()\" />\r\n  <mtx-datetimepicker-toggle [for]=\"datetimePicker\" matSuffix></mtx-datetimepicker-toggle>\r\n</mat-form-field>\r\n", styles: [".mat-mdc-form-field{display:block!important}svg{display:block;width:1em!important;height:1em!important}\n"], dependencies: [{ kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i4.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i4.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { kind: "directive", type: i4.MatError, selector: "mat-error, [matError]", inputs: ["id"] }, { kind: "directive", type: i4.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]", inputs: ["matTextSuffix"] }, { kind: "component", type: i5.MtxDatetimepicker, selector: "mtx-datetimepicker", inputs: ["multiYearSelector", "twelvehour", "startView", "mode", "timeInterval", "preventSameDateTimeSelection", "panelClass", "opened", "color", "startAt", "type", "touchUi", "timeInput", "disabled", "xPosition", "yPosition", "restoreFocus"], outputs: ["selectedChanged", "opened", "closed", "viewChanged"], exportAs: ["mtxDatetimepicker"] }, { kind: "component", type: i5.MtxDatetimepickerToggle, selector: "mtx-datetimepicker-toggle", inputs: ["for", "tabIndex", "aria-label", "disabled", "disableRipple"], exportAs: ["mtxDatetimepickerToggle"] }, { kind: "directive", type: i5.MtxDatetimepickerInput, selector: "input[mtxDatetimepicker]", inputs: ["mtxDatetimepicker", "mtxDatetimepickerFilter", "value", "min", "max", "disabled"], outputs: ["dateChange", "dateInput"], exportAs: ["mtxDatetimepickerInput"] }, { kind: "component", type: i6.ArqFormControlErrorComponent, selector: "[arq-form-control-error]", inputs: ["labelControl", "errorMapMessages", "formControlSibling"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqDateTimepickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arq-datetimepicker', encapsulation: ViewEncapsulation.None, providers: [dateTimeProviders, DatePipe], template: "<label *ngIf=\"this.label\"\r\n  >{{ this.label }}\r\n  <span *ngIf=\"this.getValidations()\" class=\"text-danger\"> * </span>\r\n</label>\r\n<mat-form-field appearance=\"outline\" *ngIf=\"this.getValue()\" [class]=\"sizeInput\" class=\"type-date pb-0\">\r\n  <mtx-datetimepicker\r\n    #datetimePicker\r\n    [type]=\"type\"\r\n    [mode]=\"mode\"\r\n    [multiYearSelector]=\"multiYearSelector\"\r\n    [startView]=\"startView\"\r\n    [twelvehour]=\"twelvehour\"\r\n    [timeInterval]=\"timeInterval\"\r\n    [touchUi]=\"touchUi\"\r\n    [timeInput]=\"timeInput\"\r\n    [disabled]=\"this.isDisabled()\"\r\n    (blur)=\"validateValue()\">\r\n  </mtx-datetimepicker>\r\n  <mat-error arq-form-control-error [labelControl]=\"this.label\" [formControlSibling]=\"this.getValue()\"></mat-error>\r\n  <mat-hint *ngIf=\"hint\">{{ this.hint }}</mat-hint>\r\n  <input [mtxDatetimepicker]=\"datetimePicker\" matInput [formControl]=\"this.getValue()\" />\r\n  <mtx-datetimepicker-toggle [for]=\"datetimePicker\" matSuffix></mtx-datetimepicker-toggle>\r\n</mat-form-field>\r\n", styles: [".mat-mdc-form-field{display:block!important}svg{display:block;width:1em!important;height:1em!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DatePipe }]; }, propDecorators: { withHours: [{
                type: Input
            }], hint: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,