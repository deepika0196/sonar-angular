import { Component, Input, ViewEncapsulation } from '@angular/core';
import { checkRequiredFields } from '../../../core/utils/basic.util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/material/card";
import * as i3 from "@angular/material/button";
export class ArqCardComponent {
    constructor() { }
    ngOnInit() {
        checkRequiredFields(this.content, 'Content');
        checkRequiredFields(this.title, 'title');
        checkRequiredFields(this.src, 'src');
    }
}
ArqCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ArqCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ArqCardComponent, selector: "arq-card", inputs: { title: "title", subtitle: "subtitle", content: "content", src: "src", image: "image", alt: "alt", buttonsSchema: "buttonsSchema", extraClass: "extraClass" }, ngImport: i0, template: "<mat-card appearance=\"outlined\" class=\"{{ this.extraClass }}\">\r\n  <mat-card-header>\r\n    <mat-card-title>{{ this.title }}</mat-card-title>\r\n    <mat-card-subtitle>{{ this.subtitle }}</mat-card-subtitle>\r\n  </mat-card-header>\r\n  <img mat-card-image *ngIf=\"this.src\" src=\"{{ this.src }}\" alt=\"{{ this.alt }}\" />\r\n  <mat-card-content>\r\n    <p>\r\n      {{ this.content }}\r\n      <ng-content></ng-content>\r\n    </p>\r\n  </mat-card-content>\r\n  <mat-card-actions *ngIf=\"buttonsSchema\">\r\n    <ng-container *ngFor=\"let btn of buttonsSchema\">\r\n      <button mat-button [color]=\"btn.color\" (click)=\"btn.action()\">{{ btn.title }}</button>\r\n    </ng-container>\r\n  </mat-card-actions>\r\n</mat-card>\r\n", styles: [".example-card{max-width:400px}mat-card img{object-fit:cover;width:10%;height:10%}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.MatCard, selector: "mat-card", inputs: ["appearance"], exportAs: ["matCard"] }, { kind: "directive", type: i2.MatCardActions, selector: "mat-card-actions", inputs: ["align"], exportAs: ["matCardActions"] }, { kind: "directive", type: i2.MatCardContent, selector: "mat-card-content" }, { kind: "component", type: i2.MatCardHeader, selector: "mat-card-header" }, { kind: "directive", type: i2.MatCardImage, selector: "[mat-card-image], [matCardImage]" }, { kind: "directive", type: i2.MatCardSubtitle, selector: "mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]" }, { kind: "directive", type: i2.MatCardTitle, selector: "mat-card-title, [mat-card-title], [matCardTitle]" }, { kind: "component", type: i3.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arq-card', encapsulation: ViewEncapsulation.None, template: "<mat-card appearance=\"outlined\" class=\"{{ this.extraClass }}\">\r\n  <mat-card-header>\r\n    <mat-card-title>{{ this.title }}</mat-card-title>\r\n    <mat-card-subtitle>{{ this.subtitle }}</mat-card-subtitle>\r\n  </mat-card-header>\r\n  <img mat-card-image *ngIf=\"this.src\" src=\"{{ this.src }}\" alt=\"{{ this.alt }}\" />\r\n  <mat-card-content>\r\n    <p>\r\n      {{ this.content }}\r\n      <ng-content></ng-content>\r\n    </p>\r\n  </mat-card-content>\r\n  <mat-card-actions *ngIf=\"buttonsSchema\">\r\n    <ng-container *ngFor=\"let btn of buttonsSchema\">\r\n      <button mat-button [color]=\"btn.color\" (click)=\"btn.action()\">{{ btn.title }}</button>\r\n    </ng-container>\r\n  </mat-card-actions>\r\n</mat-card>\r\n", styles: [".example-card{max-width:400px}mat-card img{object-fit:cover;width:10%;height:10%}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { title: [{
                type: Input
            }], subtitle: [{
                type: Input
            }], content: [{
                type: Input
            }], src: [{
                type: Input
            }], image: [{
                type: Input
            }], alt: [{
                type: Input
            }], buttonsSchema: [{
                type: Input
            }], extraClass: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJxLWNhcmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vYXJxLXNkay9zcmMvbGliL2NvbXBvbmVudHMvYXJxLWNhcmQvYXJxLWNhcmQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vYXJxLXNkay9zcmMvbGliL2NvbXBvbmVudHMvYXJxLWNhcmQvYXJxLWNhcmQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7Ozs7O0FBUXJFLE1BQU0sT0FBTyxnQkFBZ0I7SUF5QjNCLGdCQUFlLENBQUM7SUFFaEIsUUFBUTtRQUNOLG1CQUFtQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDN0MsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN6QyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7OzZHQS9CVSxnQkFBZ0I7aUdBQWhCLGdCQUFnQix3TkNUN0IsbXVCQWtCQTsyRkRUYSxnQkFBZ0I7a0JBTjVCLFNBQVM7K0JBQ0UsVUFBVSxpQkFHTCxpQkFBaUIsQ0FBQyxJQUFJOzBFQUlyQyxLQUFLO3NCQURKLEtBQUs7Z0JBSU4sUUFBUTtzQkFEUCxLQUFLO2dCQUlOLE9BQU87c0JBRE4sS0FBSztnQkFJTixHQUFHO3NCQURGLEtBQUs7Z0JBSU4sS0FBSztzQkFESixLQUFLO2dCQUlOLEdBQUc7c0JBREYsS0FBSztnQkFJTixhQUFhO3NCQURaLEtBQUs7Z0JBSU4sVUFBVTtzQkFEVCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBjaGVja1JlcXVpcmVkRmllbGRzIH0gZnJvbSAnLi4vLi4vLi4vY29yZS91dGlscy9iYXNpYy51dGlsJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXJxLWNhcmQnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9hcnEtY2FyZC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vYXJxLWNhcmQuY29tcG9uZW50LmNzcyddLFxyXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcclxufSlcclxuZXhwb3J0IGNsYXNzIEFycUNhcmRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBJbnB1dCgpXHJcbiAgdGl0bGU/OiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgc3VidGl0bGU/OiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgY29udGVudD86IHN0cmluZztcclxuXHJcbiAgQElucHV0KClcclxuICBzcmM/OiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgaW1hZ2U/OiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgYWx0Pzogc3RyaW5nO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGJ1dHRvbnNTY2hlbWE/OiBhbnlbXTtcclxuXHJcbiAgQElucHV0KClcclxuICBleHRyYUNsYXNzPzogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgY2hlY2tSZXF1aXJlZEZpZWxkcyh0aGlzLmNvbnRlbnQsICdDb250ZW50Jyk7XHJcbiAgICBjaGVja1JlcXVpcmVkRmllbGRzKHRoaXMudGl0bGUsICd0aXRsZScpO1xyXG4gICAgY2hlY2tSZXF1aXJlZEZpZWxkcyh0aGlzLnNyYywgJ3NyYycpO1xyXG4gIH1cclxufVxyXG4iLCI8bWF0LWNhcmQgYXBwZWFyYW5jZT1cIm91dGxpbmVkXCIgY2xhc3M9XCJ7eyB0aGlzLmV4dHJhQ2xhc3MgfX1cIj5cclxuICA8bWF0LWNhcmQtaGVhZGVyPlxyXG4gICAgPG1hdC1jYXJkLXRpdGxlPnt7IHRoaXMudGl0bGUgfX08L21hdC1jYXJkLXRpdGxlPlxyXG4gICAgPG1hdC1jYXJkLXN1YnRpdGxlPnt7IHRoaXMuc3VidGl0bGUgfX08L21hdC1jYXJkLXN1YnRpdGxlPlxyXG4gIDwvbWF0LWNhcmQtaGVhZGVyPlxyXG4gIDxpbWcgbWF0LWNhcmQtaW1hZ2UgKm5nSWY9XCJ0aGlzLnNyY1wiIHNyYz1cInt7IHRoaXMuc3JjIH19XCIgYWx0PVwie3sgdGhpcy5hbHQgfX1cIiAvPlxyXG4gIDxtYXQtY2FyZC1jb250ZW50PlxyXG4gICAgPHA+XHJcbiAgICAgIHt7IHRoaXMuY29udGVudCB9fVxyXG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAgICA8L3A+XHJcbiAgPC9tYXQtY2FyZC1jb250ZW50PlxyXG4gIDxtYXQtY2FyZC1hY3Rpb25zICpuZ0lmPVwiYnV0dG9uc1NjaGVtYVwiPlxyXG4gICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgYnRuIG9mIGJ1dHRvbnNTY2hlbWFcIj5cclxuICAgICAgPGJ1dHRvbiBtYXQtYnV0dG9uIFtjb2xvcl09XCJidG4uY29sb3JcIiAoY2xpY2spPVwiYnRuLmFjdGlvbigpXCI+e3sgYnRuLnRpdGxlIH19PC9idXR0b24+XHJcbiAgICA8L25nLWNvbnRhaW5lcj5cclxuICA8L21hdC1jYXJkLWFjdGlvbnM+XHJcbjwvbWF0LWNhcmQ+XHJcbiJdfQ==