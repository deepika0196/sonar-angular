import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { of } from 'rxjs';
import { ArqGenericInputComponent } from '../../../core/arq-generic-input/arq-generic-input.component';
import { checkRequiredListFields } from '../../../core/utils/basic.util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/common";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/material/select";
import * as i5 from "@angular/material/core";
import * as i6 from "@angular/material/tooltip";
import * as i7 from "../arq-form-control-error/arq-form-control-error.component";
export class ArqSelectComponent extends ArqGenericInputComponent {
    constructor() {
        super();
        this.emptyOption = false;
        this.fullObject = true;
        this.multiple = false;
        this.selectionChange = new EventEmitter();
    }
    ngOnInit() {
        checkRequiredListFields([this.selectOptionsList, this.placeholder, this.required], ['selectOptionsList', 'placeholder', 'required']);
        if (Array.isArray(this.selectOptionsList)) {
            this.selectOptionsList = of(this.selectOptionsList);
        }
        this.getValue().valueChanges.subscribe(value => {
            if (value === undefined || value === '') {
                this.setValue(null);
            }
            // caso select fullObject false, no multiple
            if (!this.fullObject && !this.multiple && value?.value) {
                this.setValue(value.value);
            }
            // caso select fullObject false, multiple
            if (!this.fullObject && this.multiple && Array.isArray(value) && value.length > 0 && value[0].value) {
                this.setValue(value.map((obj) => obj.value));
            }
        });
        this.changeObjectWithArrayPropertiesToNull();
        this.checkInitValue();
    }
    changeObjectWithArrayPropertiesToNull() {
        if (this.fullObject && Array.isArray(this.getValue().value?.value)) {
            this.setValue(null);
        }
    }
    checkInitValue() {
        if (this.fullObject) {
            if (this.getValue().value && !this.getValue().value?.value) {
                throw new Error('El valor del select debe heredar de ArqList (con propiedades value, description, descriptionV)');
            }
        }
        else if (this.multiple) {
            if (this.getValue().value && !Array.isArray(this.getValue().value)) {
                throw new Error('Al ser un select múltiple, el valor del select debe ser un array');
            }
        }
        else {
            if (typeof this.getValue().value === 'object' && this.getValue().value !== null) {
                throw new Error('El valor del select no acepta objetos, solo valores primitivos');
            }
        }
    }
    compareFunction(o1, o2) {
        let val1 = o1?.value ? o1.value : o1;
        let val2 = o2?.value ? o2.value : o2;
        return val1 === val2;
    }
    comprobarEntradas() { }
}
ArqSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqSelectComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ArqSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ArqSelectComponent, selector: "arq-select", inputs: { disabled: "disabled", selectOptionsList: "selectOptionsList", emptyOption: "emptyOption", fullObject: "fullObject", multiple: "multiple" }, outputs: { selectionChange: "selectionChange" }, usesInheritance: true, ngImport: i0, template: "<label *ngIf=\"this.label\"\r\n  >{{ this.label }}\r\n  <span *ngIf=\"this.getValidations()\" class=\"text-danger\"> * </span>\r\n</label>\r\n<mat-form-field appearance=\"outline\" class=\"full-width\" [class]=\"sizeInput\" *ngIf=\"this.getValue()\">\r\n  <mat-select\r\n    [formControl]=\"this.getValue()\"\r\n    name=\"selected\"\r\n    #tooltip=\"matTooltip\"\r\n    [matTooltip]=\"this.message\"\r\n    [matTooltipPosition]=\"this.positionTooltip\"\r\n    [matTooltipHideDelay]=\"this.hideDelay\"\r\n    [compareWith]=\"compareFunction\"\r\n    [multiple]=\"this.multiple\"\r\n    (selectionChange)=\"ngChanges()\">\r\n    <mat-option *ngIf=\"emptyOption\"></mat-option>\r\n    <mat-option *ngFor=\"let option of selectOptionsList | async\" [value]=\"option\">\r\n      <ng-container *ngIf=\"lang === 'ca'; else elseTemplateDescription\">\r\n        <span *ngIf=\"showValue\">{{ option?.value }} - </span> {{ option?.descriptionV }}\r\n      </ng-container>\r\n      <ng-template #elseTemplateDescription>\r\n        <span *ngIf=\"showValue\">{{ option?.value }} - </span> {{ option?.description }}\r\n      </ng-template>\r\n    </mat-option>\r\n  </mat-select>\r\n  <mat-error arq-form-control-error [labelControl]=\"this.label\" [formControlSibling]=\"this.getValue()\"></mat-error>\r\n</mat-form-field>\r\n", styles: [".full-width{width:100%;display:block}\n"], dependencies: [{ kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i3.MatError, selector: "mat-error, [matError]", inputs: ["id"] }, { kind: "component", type: i4.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator"], exportAs: ["matSelect"] }, { kind: "component", type: i5.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "directive", type: i6.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "component", type: i7.ArqFormControlErrorComponent, selector: "[arq-form-control-error]", inputs: ["labelControl", "errorMapMessages", "formControlSibling"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'arq-select', encapsulation: ViewEncapsulation.None, template: "<label *ngIf=\"this.label\"\r\n  >{{ this.label }}\r\n  <span *ngIf=\"this.getValidations()\" class=\"text-danger\"> * </span>\r\n</label>\r\n<mat-form-field appearance=\"outline\" class=\"full-width\" [class]=\"sizeInput\" *ngIf=\"this.getValue()\">\r\n  <mat-select\r\n    [formControl]=\"this.getValue()\"\r\n    name=\"selected\"\r\n    #tooltip=\"matTooltip\"\r\n    [matTooltip]=\"this.message\"\r\n    [matTooltipPosition]=\"this.positionTooltip\"\r\n    [matTooltipHideDelay]=\"this.hideDelay\"\r\n    [compareWith]=\"compareFunction\"\r\n    [multiple]=\"this.multiple\"\r\n    (selectionChange)=\"ngChanges()\">\r\n    <mat-option *ngIf=\"emptyOption\"></mat-option>\r\n    <mat-option *ngFor=\"let option of selectOptionsList | async\" [value]=\"option\">\r\n      <ng-container *ngIf=\"lang === 'ca'; else elseTemplateDescription\">\r\n        <span *ngIf=\"showValue\">{{ option?.value }} - </span> {{ option?.descriptionV }}\r\n      </ng-container>\r\n      <ng-template #elseTemplateDescription>\r\n        <span *ngIf=\"showValue\">{{ option?.value }} - </span> {{ option?.description }}\r\n      </ng-template>\r\n    </mat-option>\r\n  </mat-select>\r\n  <mat-error arq-form-control-error [labelControl]=\"this.label\" [formControlSibling]=\"this.getValue()\"></mat-error>\r\n</mat-form-field>\r\n", styles: [".full-width{width:100%;display:block}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { disabled: [{
                type: Input
            }], selectOptionsList: [{
                type: Input
            }], emptyOption: [{
                type: Input
            }], fullObject: [{
                type: Input
            }], multiple: [{
                type: Input
            }], selectionChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,