import { HttpContext } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';
import { enable, gvloginUrl, nombreApp } from '../interceptors/arq-gvlogin-interceptor.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class ArqHttpClient {
    constructor(_httpClient, _env) {
        this._httpClient = _httpClient;
        this._env = _env;
    }
    _addGvLoginContext(context) {
        if (!context) {
            context = new HttpContext();
        }
        context.set(nombreApp, this._env.gvlogin.aplicacion);
        context.set(gvloginUrl, this._env.gvlogin.url);
        context.set(enable, this._env.gvlogin.enable);
        return context;
    }
    request(method, url, options = {}) {
        // implementation
        options = {
            ...options,
            context: this._addGvLoginContext(options.context)
        };
        return this._httpClient.request(method, url, options);
    }
    delete(url, options = {}) {
        // implementation
        options = {
            ...options,
            context: this._addGvLoginContext(options.context)
        };
        return this._httpClient.delete(url, options);
    }
    get(url, options = {}) {
        // implementation
        options = {
            ...options,
            context: this._addGvLoginContext(options.context)
        };
        return this._httpClient.get(url, options);
    }
    head(url, options = {}) {
        // implementation
        options = {
            ...options,
            context: this._addGvLoginContext(options.context)
        };
        return this._httpClient.head(url, options);
    }
    jsonp(url, callbackParam) {
        // implementation
        return this._httpClient.jsonp(url, callbackParam);
    }
    options(url, options = {}) {
        // implementation
        options = {
            ...options,
            context: this._addGvLoginContext(options.context)
        };
        return this._httpClient.options(url, options);
    }
    patch(url, body, options = {}) {
        // implementation
        options = {
            ...options,
            context: this._addGvLoginContext(options.context)
        };
        return this._httpClient.patch(url, body, options);
    }
    post(url, body, options = {}) {
        // implementation
        options = {
            ...options,
            context: this._addGvLoginContext(options.context)
        };
        return this._httpClient.post(url, body, options);
    }
    put(url, body, options = {}) {
        // implementation
        options = {
            ...options,
            context: this._addGvLoginContext(options.context)
        };
        return this._httpClient.put(url, body, options);
    }
}
ArqHttpClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqHttpClient, deps: [{ token: i1.HttpClient }, { token: 'env' }], target: i0.ɵɵFactoryTarget.Injectable });
ArqHttpClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqHttpClient, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ArqHttpClient, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['env']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,