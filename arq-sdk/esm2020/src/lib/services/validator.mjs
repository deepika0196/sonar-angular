export class customValidators {
    static arrayMinItems(min, type) {
        return (control) => {
            if (type == 'array' && control.value !== undefined && (isNaN(control.value) || control.value.length < min)) {
                return { 'minItems': true };
            }
            return null;
        };
    }
    static arrayMaxItems(max, type) {
        return (control) => {
            if (type == 'array' && control.value !== undefined && (isNaN(control.value) || control.value.length > max)) {
                return { 'maxItems': true };
            }
            return null;
        };
    }
    static arrayUniqueItems(unique, type) {
        return (control) => {
            if (control.value !== undefined && unique && (checkIfDuplicateExists(control.value))) {
                return { 'maxItems': true };
            }
            return null;
        };
    }
    static numberExclusiveMaximum(max, type) {
        return (control) => {
            if (type == 'number' && control.value !== undefined && (isNaN(control.value) || control.value >= max)) {
                return { 'exclusiveMaximum': true };
            }
            return null;
        };
    }
    static numberExclusiveMinimum(min, type) {
        return (control) => {
            if (type == 'number' && control.value !== undefined && (isNaN(control.value) || control.value <= min)) {
                return { 'exclusiveMinimum': true };
            }
            return null;
        };
    }
    static numberMinimum(min, type) {
        return (control) => {
            console.log(isNaN(control.value) || control.value >= min);
            if (type == 'number' && control.value !== undefined && (isNaN(control.value) || control.value < min)) {
                return { 'minimum': true };
            }
            return null;
        };
    }
    static numberMaximum(max, type) {
        return (control) => {
            if (type == 'number' && control.value !== undefined && (isNaN(control.value) || control.value > max)) {
                return { 'maximum': true };
            }
            return null;
        };
    }
    static numberMultipleOf(multiplo, type) {
        return (control) => {
            if (type == 'number' && control.value !== undefined && (isNaN(control.value) || control.value % multiplo != 0)) {
                return { 'multipleOf': true };
            }
            return null;
        };
    }
}
function checkIfDuplicateExists(arr) {
    return new Set(arr).size != arr.length;
}
//# sourceMappingURL=data:application/json;base64,