import { catchError, of, shareReplay } from 'rxjs';
export const arqApiResolver = (service) => {
    let schema$;
    return {
        schema: (route, state) => {
            let idBloque = undefined;
            if (route.paramMap.has('idBloque')) {
                idBloque = route.paramMap.get('idBloque');
            }
            if (!schema$) {
                schema$ = service.schema(idBloque).pipe(shareReplay(1));
            }
            return schema$;
        },
        findOne: (route, state) => {
            if (!service.findOne) {
                return null;
            }
            return service.findOne().pipe(catchError((error) => of(error)));
        },
        findById: (route, state) => {
            if (!service.findById) {
                return null;
            }
            let id = route.params['id'];
            return service.findById(id).pipe(catchError((error) => of(error)));
        }
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJxLWFwaS1zZXJ2aWNlLnJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vYXJxLXNkay9zcmMvbGliL3Jlc29sdmVycy9hcnEtYXBpLXNlcnZpY2UucmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR25ELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFnQyxPQUFVLEVBQUUsRUFBRTtJQUMxRSxJQUFJLE9BQVksQ0FBQztJQUNqQixPQUFPO1FBQ0wsTUFBTSxFQUFFLENBQUMsS0FBNkIsRUFBRSxLQUEwQixFQUFFLEVBQUU7WUFDcEUsSUFBSSxRQUFRLEdBQXVCLFNBQVMsQ0FBQztZQUM3QyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNsQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFFLENBQUM7YUFDNUM7WUFDRCxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNaLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN6RDtZQUNELE9BQU8sT0FBTyxDQUFDO1FBQ2pCLENBQUM7UUFDRCxPQUFPLEVBQUUsQ0FBQyxLQUE2QixFQUFFLEtBQTBCLEVBQUUsRUFBRTtZQUNyRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtnQkFDcEIsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUF3QixFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLENBQUM7UUFDRCxRQUFRLEVBQUUsQ0FBQyxLQUE2QixFQUFFLEtBQTBCLEVBQUUsRUFBRTtZQUN0RSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRTtnQkFDckIsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUIsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUF3QixFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hGLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyU3RhdGVTbmFwc2hvdCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IEFycUFwaVNlcnZpY2VCYXNpY3MgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2FycS1hcGktc2VydmljZS5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBjYXRjaEVycm9yLCBvZiwgc2hhcmVSZXBsYXkgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcblxyXG5leHBvcnQgY29uc3QgYXJxQXBpUmVzb2x2ZXIgPSA8VCBleHRlbmRzIEFycUFwaVNlcnZpY2VCYXNpY3M+KHNlcnZpY2U6IFQpID0+IHtcclxuICBsZXQgc2NoZW1hJDogYW55O1xyXG4gIHJldHVybiB7XHJcbiAgICBzY2hlbWE6IChyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpID0+IHtcclxuICAgICAgbGV0IGlkQmxvcXVlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgIGlmIChyb3V0ZS5wYXJhbU1hcC5oYXMoJ2lkQmxvcXVlJykpIHtcclxuICAgICAgICBpZEJsb3F1ZSA9IHJvdXRlLnBhcmFtTWFwLmdldCgnaWRCbG9xdWUnKSE7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFzY2hlbWEkKSB7XHJcbiAgICAgICAgc2NoZW1hJCA9IHNlcnZpY2Uuc2NoZW1hKGlkQmxvcXVlKS5waXBlKHNoYXJlUmVwbGF5KDEpKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gc2NoZW1hJDtcclxuICAgIH0sXHJcbiAgICBmaW5kT25lOiAocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KSA9PiB7XHJcbiAgICAgIGlmICghc2VydmljZS5maW5kT25lKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHNlcnZpY2UuZmluZE9uZSgpLnBpcGUoY2F0Y2hFcnJvcigoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSA9PiBvZihlcnJvcikpKTtcclxuICAgIH0sXHJcbiAgICBmaW5kQnlJZDogKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCkgPT4ge1xyXG4gICAgICBpZiAoIXNlcnZpY2UuZmluZEJ5SWQpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBsZXQgaWQgPSByb3V0ZS5wYXJhbXNbJ2lkJ107XHJcbiAgICAgIHJldHVybiBzZXJ2aWNlLmZpbmRCeUlkKGlkKS5waXBlKGNhdGNoRXJyb3IoKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkgPT4gb2YoZXJyb3IpKSk7XHJcbiAgICB9XHJcbiAgfTtcclxufTtcclxuIl19