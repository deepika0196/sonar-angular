import { EventEmitter, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { TooltipPosition } from '@angular/material/tooltip';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
export declare abstract class ArqGenericInputComponent implements OnInit {
    readonly LANG_ES = "es";
    layout: string;
    label: string | undefined;
    columns: number;
    labelColumns: any;
    value: string;
    required: boolean;
    readonly: boolean;
    placeholder: string;
    sizeInput: string;
    hideDelay: number;
    message: string;
    positionTooltip: TooltipPosition;
    msgError: string;
    prefix: string;
    suffix: string;
    iconPrefix: boolean;
    iconSuffix: boolean;
    fGroup: FormGroup;
    lang: string | undefined;
    showValue: boolean;
    protected changeEvent: EventEmitter<any>;
    subscription: Subscription | undefined;
    idioma: string | undefined;
    labelClass: string;
    inputClass: string;
    constructor();
    ngOnInit(): void;
    protected abstract comprobarEntradas(): any;
    protected initcialitzarForm(): void;
    vaciaInput(): void;
    ngChanges(evt?: any, elem?: any): void;
    validateValue(): void;
    ngSetChanges(): void;
    protected getValue(): FormControl;
    protected setValueCheckbox(): void;
    protected setValue(value: any): void;
    protected setValueDate(): void;
    validateDate(): void;
    setFG(control: any): void;
    getValidations(): boolean;
    onFocusOutEvent(event: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ArqGenericInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ArqGenericInputComponent, "ng-component", never, { "layout": "layout"; "label": "label"; "columns": "columns"; "labelColumns": "labelColumns"; "value": "value"; "required": "required"; "readonly": "readonly"; "placeholder": "placeholder"; "sizeInput": "sizeInput"; "hideDelay": "hideDelay"; "message": "message"; "positionTooltip": "positionTooltip"; "msgError": "msgError"; "prefix": "prefix"; "suffix": "suffix"; "iconPrefix": "iconPrefix"; "iconSuffix": "iconSuffix"; "fGroup": "fGroup"; "lang": "lang"; "showValue": "showValue"; }, { "changeEvent": "changeEvent"; }, never, never, false, never>;
}
