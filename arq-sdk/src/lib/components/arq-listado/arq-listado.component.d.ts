import { EventEmitter, OnDestroy, OnInit, PipeTransform } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ThemePalette } from '@angular/material/core';
import { Observable } from 'rxjs';
import { ArqCampo, ArqDynamic } from '../../interfaces/arq-dynamic.interface';
import { ArqList } from '../../interfaces/arq-list.interface';
import { ArqBaseComponent } from '../../utils/arq-base.component';
import { ArqDatatableColumnsSchema, ArqDatatableConfig } from '../components';
import { ArqAutocompleteSearchFn, ArqPageableRequest, ArqPageableResponse } from './../../interfaces/arq-basic.interface';
import { ArqHttpClient } from './../../services/arq-http-client.service';
import * as i0 from "@angular/core";
export declare class ArqListadoComponent extends ArqBaseComponent implements OnInit, OnDestroy {
    protected _arqHttpClient: ArqHttpClient;
    readonly LANG_ES = "es";
    readonly NAME_FC_DP_RANGE = "_2";
    readonly SEPARATOR_DP_RANGE = "-";
    readonly REQUERIDO_S = "S";
    readonly DATEPICKER_STR = "datepicker";
    readonly DATEPICKER_RANGE_STR = "datepicker-range";
    readonly SELECT_STR = "select";
    readonly SELECT_MULTIPLE_STR = "select-multiple";
    readonly AUTOCOMPLETE_STR = "autocomplete";
    readonly CHECKBOX_BASIC_STR = "checkbox-basic";
    readonly INPUT_MONEY_STR = "input-money";
    readonly INPUT_NUMBER_STR = "input-number";
    private readonly DEPENDIENTE_REQUERIDO;
    private readonly SEPARADOR;
    private readonly PARAM_REGEXP;
    fGroup: FormGroup;
    urlBaseBack: string;
    dataEvent$: EventEmitter<ArqDynamic>;
    observableData: Observable<any>;
    numCols: string;
    rowHeight: string;
    label: string;
    subLabel: string;
    lang: string;
    showBtnExport: boolean;
    labelBtnExport: string;
    colorBtnExport: string;
    typeBtnExport: string;
    iconBtnExport: string;
    _btnExportFn: () => any;
    showBtnSearch: boolean;
    labelBtnSearch: string;
    colorBtnSearch: string;
    typeBtnSearch: string;
    iconBtnSearch: string;
    _btnSearchFn: () => any;
    msgError: string;
    colorCheckboxBasic: ThemePalette;
    checkedCheckboxBasic?: boolean;
    loadedData$: Observable<ArqPageableResponse>;
    loadDataEvent$: EventEmitter<ArqPageableRequest>;
    _tableConfig: ArqDatatableConfig;
    columnsSchema: ArqDatatableColumnsSchema[];
    datos: ArqDynamic;
    selectOptionsArray: Map<string, Observable<ArqList[]>>;
    autocompletetOptionsArray: Map<String, ArqAutocompleteSearchFn>;
    grupos: string[];
    constructor(_arqHttpClient: ArqHttpClient);
    ngOnInit(): void;
    private rellenarIds;
    private obtenerGrupos;
    private eventRellenarValuesForm;
    private getControlValue;
    private puedeHabilitarDependiente;
    private extraerCondicion;
    requireData(request: ArqPageableRequest): void;
    private cargarListados;
    private cargarListado;
    private rellenarParametrosUrl;
    private getUrlParamsFromRequest;
    private createColumnSchema;
    private addTypeColumnSchema;
    private addColumnSchema;
    private createFormGroup;
    search(): void;
    export(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ArqListadoComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ArqListadoComponent, "arq-listado", never, { "urlBaseBack": "urlBaseBack"; "observableData": "observableData"; "numCols": "numCols"; "rowHeight": "rowHeight"; "label": "label"; "subLabel": "subLabel"; "lang": "lang"; "showBtnExport": "showBtnExport"; "labelBtnExport": "labelBtnExport"; "colorBtnExport": "colorBtnExport"; "typeBtnExport": "typeBtnExport"; "iconBtnExport": "iconBtnExport"; "_btnExportFn": "btnExportFn"; "showBtnSearch": "showBtnSearch"; "labelBtnSearch": "labelBtnSearch"; "colorBtnSearch": "colorBtnSearch"; "typeBtnSearch": "typeBtnSearch"; "iconBtnSearch": "iconBtnSearch"; "_btnSearchFn": "btnSearchFn"; "msgError": "msgError"; "colorCheckboxBasic": "colorCheckboxBasic"; "checkedCheckboxBasic": "checkedCheckboxBasic"; "loadedData$": "loadedData"; "_tableConfig": "tableConfig"; }, { "dataEvent$": "dataEvent$"; "loadDataEvent$": "loadDataEvent"; }, never, never, false, never>;
}
export declare class FilterByGrupoPipe implements PipeTransform {
    transform(campos: ArqCampo[], grupo: string): ArqCampo[];
    static ɵfac: i0.ɵɵFactoryDeclaration<FilterByGrupoPipe, never>;
    static ɵpipe: i0.ɵɵPipeDeclaration<FilterByGrupoPipe, "filterByGrupo", false>;
}
