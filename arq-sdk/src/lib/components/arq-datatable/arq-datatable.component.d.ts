import { AfterViewInit, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { MatPaginator, PageEvent } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { Observable } from 'rxjs/internal/Observable';
import { ArqDialogService } from '../../../lib/services/arq-dialog.service';
import { ArqBaseComponent } from '../../../lib/utils/utils';
import { ArqPageableRequest, ArqPageableResponse } from '../../interfaces/arq-basic.interface';
import { ArqDatatableActions, ArqDatatableColumnsSchema, ArqDatatableConfig, ArqDatatableSelectEvent } from './arq-datatable.interface';
import { ArqSpinnerService } from '../../services/arq-spinner.service';
import * as i0 from "@angular/core";
export declare class ArqDatatableComponent extends ArqBaseComponent implements OnInit, OnDestroy, AfterViewInit, OnChanges {
    private formBuilder;
    private serviceDialog;
    private arqSpinnerService;
    _columnsSchema: ArqDatatableColumnsSchema[];
    _tableConfig: ArqDatatableConfig;
    loadedData$: Observable<ArqPageableResponse>;
    _loadDataFn: (request: ArqPageableRequest) => Observable<ArqPageableResponse>;
    refreshData$: Observable<any>;
    loadDataEvent$: EventEmitter<ArqPageableRequest>;
    selectEvent$: EventEmitter<ArqDatatableSelectEvent>;
    _form?: FormGroup;
    _isEditing: boolean;
    itemsPerPageLabel: string;
    nextPageLabel: string;
    firstPageLabel: string;
    lastPageLabel: string;
    previousPageLabel: string;
    range: string;
    _loadDataMantFn: (request: ArqPageableRequest, table?: string) => Observable<ArqPageableResponse>;
    paginator: MatPaginator;
    dataSource: MatTableDataSource<any, import("@angular/material/table").MatTableDataSourcePaginator>;
    displayedColumns: string[];
    tableConfig: ArqDatatableConfig;
    dataRequest: ArqPageableRequest;
    totalElements: number;
    isLoading: boolean;
    valid: any;
    activeQueryFilter: string;
    activeFilter: any;
    displayedColumnsStatic: string[];
    isDisplayContextMenu: boolean;
    rightClickMenuPositions: {
        x: number;
        y: number;
    };
    rightClickMenuItems: any;
    selectedRows: any[];
    checkSelectedRow: (row: any) => boolean;
    iterateAndF: (_: any) => any;
    toOf: (_: any) => any;
    findValue: (value: any, data: any, lang: any, type: any) => any;
    findSrc: (value: any, data: any) => any;
    hideIcon: boolean;
    showFilters: boolean;
    formGroup?: FormGroup<any>;
    readonly: boolean;
    fg: any;
    rowClicked: any;
    originalFilterType: false | 'hide' | 'global' | 'column' | 'both' | null | undefined;
    fgCopy: any;
    constructor(formBuilder: FormBuilder, serviceDialog: ArqDialogService, arqSpinnerService: ArqSpinnerService);
    ngAfterViewInit(): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    enable(): void;
    disable(): void;
    action(): (row: any) => any;
    private initializeDatatable;
    refreshData(): void;
    private startLoading;
    private stopLoading;
    private addIdsIfNecesary;
    private setTableConfig;
    private customPaginator;
    nextPage(event: PageEvent): void;
    autocFilter(data: any, value: any): any;
    editCol(col: any, row: any): any;
    editRow(row: any): void;
    showActionsCol(show?: boolean): void;
    hideFilter(b: boolean): void;
    inputHandler(e: any, id: number, key: string): void;
    addNewRow(): void;
    openDialog(el: any): void;
    showSelectCol(show?: boolean): void;
    displayContextMenu(event: {
        clientX: number;
        clientY: number;
    }, row: any): void;
    event(): void;
    sortHandler(ev: {
        active: string;
        direction: 'asc' | 'desc' | '';
    }): void;
    filterHandler(ev: any, col: string): void;
    obtenerElemento(obj: any, prop: any): any;
    cloneFormGroup(): FormGroup;
    eventRow(row: any): void;
    toggleSelectRow(row: any): void;
    cleanSelectionRows(): void;
    stopEditing(row?: any): void;
    private stopEditingAllRows;
    private stopEditingRow;
    desactivarItems(action: ArqDatatableActions): void;
    actionHandler(action: ArqDatatableActions, element: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ArqDatatableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ArqDatatableComponent, "arq-datatable", never, { "_columnsSchema": "columnsSchema"; "_tableConfig": "tableConfig"; "loadedData$": "loadedData"; "_loadDataFn": "loadDataFn"; "refreshData$": "refreshData"; "_form": "form"; "_isEditing": "isEditing"; "itemsPerPageLabel": "itemsPerPageLabel"; "nextPageLabel": "nextPageLabel"; "firstPageLabel": "firstPageLabel"; "lastPageLabel": "lastPageLabel"; "previousPageLabel": "previousPageLabel"; "range": "range"; "_loadDataMantFn": "loadDataMantFn"; }, { "loadDataEvent$": "loadDataEvent"; "selectEvent$": "selectEvent"; }, never, never, false, never>;
}
